(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    185228,       3894]
NotebookOptionsPosition[    180631,       3753]
NotebookOutlinePosition[    182257,       3804]
CellTagsIndexPosition[    181921,       3792]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Using Wall-Friction to Position Two Particles Using Shared Control Inputs\
\>", "DemoTitle",
 CellChangeTimes->{{3.6562430492504168`*^9, 3.656243101128138*^9}}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"achieveDesiredXspacing", "[", 
     RowBox[{"ps1_", ",", "ps2_", ",", "pe1_", ",", "pe2_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "this", " ", "code", " ", "moves", " ", "robots", " ", "to", " ", 
       "desired", " ", "x", " ", "positions"}], ",", " ", 
      RowBox[{
      "but", " ", "does", " ", "not", " ", "change", " ", "relative", " ", 
       "y", " ", "positions"}]}], "*)"}], 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "retVal", ",", "\[CapitalDelta]e", " ", ",", "\[CapitalDelta]s", " ", 
        ",", " ", "L", " ", ",", " ", "currPosTop", ",", " ", "currPosBottom",
         ",", "\[CapitalDelta]r", ",", " ", "moves", ",", "poses", ",", " ", 
        "endPosTop", ",", " ", "endPosBottom", ",", " ", 
        RowBox[{"my\[Epsilon]", " ", "=", " ", 
         RowBox[{"1", "/", "100"}]}], ",", "startTop", ",", "pathTop", ",", 
        "pathBottom", ",", 
        RowBox[{"flip", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "determine", " ", "which", " ", "point", " ", "is", " ", "highest"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "ps1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ">", 
          
          RowBox[{
          "ps2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"currPosTop", " ", "=", " ", "ps1"}], ";", " ", 
          RowBox[{"currPosBottom", "=", "ps2"}], ";", 
          RowBox[{"endPosTop", " ", "=", " ", "pe1"}], ";", " ", 
          RowBox[{"endPosBottom", "=", " ", "pe2"}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"currPosTop", " ", "=", " ", "ps2"}], ";", " ", 
          RowBox[{"currPosBottom", "=", "ps1"}], ";", " ", 
          RowBox[{"endPosTop", " ", "=", " ", "pe2"}], ";", " ", 
          RowBox[{"endPosBottom", "=", " ", "pe1"}], ";", 
          RowBox[{"flip", "=", "True"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"startTop", " ", "=", " ", "currPosTop"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]e", " ", "=", " ", 
        RowBox[{
         RowBox[{
         "endPosTop", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "-", 
         RowBox[{
         "endPosBottom", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"desired", " ", "difference", " ", "in", " ", "x"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]s", " ", "=", " ", 
        RowBox[{
         RowBox[{
         "currPosTop", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
          " ", "-", " ", 
         RowBox[{
         "currPosBottom", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"current", " ", "distance", " ", "in", " ", "x"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"moves", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "}"}]}], ";", "  ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"list", " ", "of", " ", "commanded", " ", "moves"}], ",", 
         " ", 
         RowBox[{"in", " ", "form", " ", 
          RowBox[{"{", 
           RowBox[{"\[CapitalDelta]x", ",", " ", "\[CapitalDelta]y"}], 
           "}"}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"pathTop", " ", "=", " ", 
        RowBox[{"{", "currPosTop", "}"}]}], ";", 
       RowBox[{"pathBottom", " ", "=", " ", 
        RowBox[{"{", "currPosBottom", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"L", "=", " ", "1"}], ";", "  ", 
       RowBox[{"(*", 
        RowBox[{"size", " ", "of", " ", "workspace"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"\[CapitalDelta]s", "\[Equal]", "\[CapitalDelta]e"}], ",", 
         " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "endPosTop", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], " ", "-", " ", 
              RowBox[{
              "currPosTop", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}]}], " ", ",", "0"}], " ", "}"}]}], 
          ";", 
          RowBox[{"currPosTop", "+=", "\[CapitalDelta]r"}], ";", " ", 
          RowBox[{"currPosBottom", "+=", "\[CapitalDelta]r"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"pathTop", " ", ",", " ", "currPosTop"}], "]"}], ";", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"pathBottom", " ", ",", "currPosBottom"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "moves", ",", "currPosTop", ",", "currPosBottom", ",", 
             "endPosTop", ",", "endPosBottom", ",", "pathTop", ",", 
             "pathBottom"}], "}"}], "]"}]}]}], "]"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"base", " ", "case"}], ",", " ", 
         RowBox[{"ends", " ", "the", " ", "recursion"}]}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"\[CapitalDelta]e", " ", "<", " ", "0"}], ",", "  ", 
            RowBox[{"(*", "right", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "1.", " ", "move", " ", "almost", " ", "to", " ", "right", " ", 
              "wall"}], "*)"}], " ", 
            RowBox[{"L", " ", "-", " ", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{
               "currPosTop", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}], " ", ",", " ", 
               RowBox[{
               "currPosBottom", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}], "]"}], "-", "my\[Epsilon]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "1.", " ", "move", " ", "almost", " ", "to", " ", "left", " ", 
              "wall"}], "*)"}], " ", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"Min", "[", 
               RowBox[{
                RowBox[{
                "currPosTop", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}], " ", ",", " ", 
                RowBox[{
                "currPosBottom", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "]"}]}], "+", 
             "my\[Epsilon]"}]}], "]"}], ",", "0"}], "}"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "2.", " ", "move", " ", "bottom", " ", "robot", " ", "to", " ", 
         "touch", " ", "bottom", " ", "wall"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", "=", 
        RowBox[{"\[CapitalDelta]r", "+", 
         RowBox[{"{", " ", 
          RowBox[{"0", ",", " ", 
           RowBox[{"-", 
            RowBox[{
            "currPosBottom", "\[LeftDoubleBracket]", "2", 
             "\[RightDoubleBracket]"}]}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosTop", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"currPosBottom", "+=", "\[CapitalDelta]r"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathTop", " ", ",", " ", "currPosTop"}], "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathBottom", " ", ",", "currPosBottom"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "3.", " ", "drag", " ", "sideways", " ", "to", " ", "left", " ", "or",
          " ", "right"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]s"}], " ", ">", 
             "0"}], " ", ",", 
            RowBox[{"Min", "[", 
             RowBox[{
              RowBox[{"Abs", "[", 
               RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]s"}], "]"}], 
              ",", " ", 
              RowBox[{"L", "-", " ", 
               RowBox[{
               "currPosTop", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}]}], "]"}], ",", 
            RowBox[{"-", 
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"Abs", "[", 
                RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]s"}], "]"}], 
               ",", " ", 
               RowBox[{
               "currPosTop", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}], "]"}]}]}], "]"}], ",", "0"}], 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosTop", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"currPosBottom", "+=", "\[CapitalDelta]r"}], ";"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathTop", " ", ",", " ", "currPosTop"}], "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathBottom", " ", ",", "currPosBottom"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"4.", " ", "move", " ", "up", " ", "slightly"}], ",", " ", 
         RowBox[{"away", " ", "from", " ", "bottom", " ", "wall"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", "=", 
        RowBox[{"{", " ", 
         RowBox[{"0", ",", "my\[Epsilon]"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosTop", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"currPosBottom", "+=", "\[CapitalDelta]r"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]s", " ", "=", " ", 
        RowBox[{
         RowBox[{
         "currPosTop", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
          " ", "-", " ", 
         RowBox[{
         "currPosBottom", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Abs", "[", 
           RowBox[{"\[CapitalDelta]e", " ", "-", " ", "\[CapitalDelta]s"}], 
           " ", "]"}], ">", 
          RowBox[{"1", "/", "1000"}]}], " ", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"retVal", " ", "=", 
           RowBox[{"achieveDesiredXspacing", "[", 
            RowBox[{
            "currPosTop", ",", "currPosBottom", ",", "endPosTop", ",", 
             "endPosBottom"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"currPosTop", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
           ";", 
          RowBox[{"currPosBottom", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}],
           ";", 
          RowBox[{"endPosTop", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}],
           ";", 
          RowBox[{"endPosBottom", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"moves", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"moves", ",", 
             RowBox[{"retVal", "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"pathTop", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"pathTop", " ", ",", 
             RowBox[{"retVal", "\[LeftDoubleBracket]", 
              RowBox[{"6", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], 
          ";", 
          RowBox[{"pathBottom", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"pathBottom", " ", ",", 
             RowBox[{"retVal", "\[LeftDoubleBracket]", 
              RowBox[{"7", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"flip", ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
           "moves", ",", "currPosBottom", ",", "currPosTop", ",", 
            "endPosBottom", ",", "endPosTop", ",", "pathBottom", ",", " ", 
            "pathTop"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
           "moves", ",", "currPosTop", ",", "currPosBottom", ",", "endPosTop",
             ",", "endPosBottom", ",", "pathTop", ",", "pathBottom"}], "}"}], 
          "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"achieveDesiredYspacing", "[", 
     RowBox[{"ps1_", ",", "ps2_", ",", "pe1_", ",", "pe2_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "this", " ", "code", " ", "moves", " ", "robots", " ", "to", " ", 
       "desired", " ", "x", " ", "positions"}], ",", " ", 
      RowBox[{
      "but", " ", "does", " ", "not", " ", "change", " ", "relative", " ", 
       "y", " ", "positions"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\[CapitalDelta]e", " ", ",", " ", "\[CapitalDelta]y", " ", ",", " ", 
        "L", " ", ",", " ", "retVal", ",", "\[IndentingNewLine]", 
        "currPosRight", ",", " ", "currPosLeft", ",", "\[CapitalDelta]r", ",",
         " ", "moves", ",", " ", "endPosRight", ",", " ", "endPosLeft", ",", 
        " ", 
        RowBox[{"my\[Epsilon]", " ", "=", " ", 
         RowBox[{"1", "/", "100"}]}], ",", "startRight", ",", "pathRight", 
        ",", "pathLeft", ",", 
        RowBox[{"flip", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "determine", " ", "which", " ", "point", " ", "is", " ", "rightmost"}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "ps1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ">", 
          
          RowBox[{
          "ps2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"currPosRight", " ", "=", " ", "ps1"}], ";", " ", 
          RowBox[{"currPosLeft", "=", "ps2"}], ";", 
          RowBox[{"endPosRight", " ", "=", " ", "pe1"}], ";", " ", 
          RowBox[{"endPosLeft", "=", " ", "pe2"}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"currPosRight", " ", "=", " ", "ps2"}], ";", " ", 
          RowBox[{"currPosLeft", "=", "ps1"}], ";", " ", 
          RowBox[{"endPosRight", " ", "=", " ", "pe2"}], ";", " ", 
          RowBox[{"endPosLeft", "=", " ", "pe1"}], ";", 
          RowBox[{"flip", "=", "True"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"startRight", " ", "=", " ", "currPosRight"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]e", " ", "=", " ", 
        RowBox[{
         RowBox[{
         "endPosRight", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}], "-", 
         RowBox[{
         "endPosLeft", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}]}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"desired", " ", "difference"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]y", " ", "=", " ", 
        RowBox[{
         RowBox[{
         "currPosRight", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}], " ", "-", " ", 
         RowBox[{
         "currPosLeft", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}]}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"current", " ", "distance"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"moves", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "}"}]}], ";", "  ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"list", " ", "of", " ", "commanded", " ", "moves"}], ",", 
         " ", 
         RowBox[{"in", " ", "form", " ", 
          RowBox[{"{", 
           RowBox[{"\[CapitalDelta]x", ",", " ", "\[CapitalDelta]y"}], 
           "}"}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"pathRight", " ", "=", " ", 
        RowBox[{"{", "currPosRight", "}"}]}], ";", 
       RowBox[{"pathLeft", " ", "=", " ", 
        RowBox[{"{", "currPosLeft", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"L", "=", " ", "1"}], ";", "  ", 
       RowBox[{"(*", 
        RowBox[{"size", " ", "of", " ", "workspace"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"\[CapitalDelta]y", "\[Equal]", "\[CapitalDelta]e"}], ",", 
         " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
           RowBox[{"endPosRight", "-", " ", "currPosRight"}]}], ";", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
          RowBox[{"currPosRight", "+=", "\[CapitalDelta]r"}], ";", " ", 
          RowBox[{"currPosLeft", "+=", "\[CapitalDelta]r"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"pathRight", " ", ",", " ", "currPosRight"}], "]"}], ";", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"pathLeft", " ", ",", "endPosLeft"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "moves", ",", "currPosRight", ",", "currPosLeft", ",", 
             "endPosRight", ",", "endPosLeft", ",", "pathRight", ",", 
             "pathLeft"}], "}"}], "]"}]}]}], "]"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"base", " ", 
         RowBox[{"case", " ", "--"}], " ", "end", " ", "the", " ", 
         "recursion"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       " ", 
       RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"\[CapitalDelta]e", " ", "<", " ", "0"}], ",", "  ", 
            RowBox[{"(*", "right", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "1.", " ", "move", " ", "almost", " ", "to", " ", "up", " ", 
              "wall"}], "*)"}], " ", 
            RowBox[{"L", " ", "-", " ", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{
               "currPosRight", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}], " ", ",", " ", 
               RowBox[{
               "currPosLeft", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}], "]"}], "-", "my\[Epsilon]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "1.", " ", "move", " ", "almost", " ", "to", " ", "down", " ", 
              "wall"}], "*)"}], " ", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"Min", "[", 
               RowBox[{
                RowBox[{
                "currPosRight", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}], " ", ",", " ", 
                RowBox[{
                "currPosLeft", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "]"}]}], "+", 
             "my\[Epsilon]"}]}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "2.", " ", "move", " ", "left", " ", "robot", " ", "to", " ", "touch",
          " ", "left", " ", "wall"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", "=", 
        RowBox[{"\[CapitalDelta]r", "+", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{
            "currPosLeft", "\[LeftDoubleBracket]", "1", 
             "\[RightDoubleBracket]"}]}], ",", "0"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosRight", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"currPosLeft", "+=", "\[CapitalDelta]r"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathRight", " ", ",", " ", "currPosRight"}], "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathLeft", " ", ",", "currPosLeft"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "3.", " ", "drag", " ", "sideways", " ", "up", " ", "or", " ", 
         "down"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]y"}], " ", ">", 
             "0"}], " ", ",", 
            RowBox[{"Min", "[", 
             RowBox[{
              RowBox[{"Abs", "[", 
               RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]y"}], "]"}], 
              ",", " ", 
              RowBox[{"L", "-", " ", 
               RowBox[{
               "currPosRight", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}], "]"}], ",", 
            RowBox[{"-", 
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"Abs", "[", 
                RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]y"}], "]"}], 
               ",", " ", 
               RowBox[{
               "currPosRight", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}], "]"}]}]}], "]"}]}], "}"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosRight", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"currPosLeft", "+=", "\[CapitalDelta]r"}], ";"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathRight", " ", ",", " ", "currPosRight"}], "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathLeft", " ", ",", "currPosLeft"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"4.", " ", "move", " ", "slightly", " ", "right"}], ",", " ", 
         RowBox[{"away", " ", "from", " ", "wall"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", "=", 
        RowBox[{"{", " ", 
         RowBox[{"my\[Epsilon]", ",", "0"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosRight", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"currPosLeft", "+=", "\[CapitalDelta]r"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathRight", " ", ",", " ", "currPosRight"}], "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathLeft", " ", ",", "currPosLeft"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "5.", " ", "move", " ", "to", " ", "correct", " ", "y", " ", 
          "positions"}], ",", " ", 
         RowBox[{"and", " ", "starting", " ", "x", " ", "positions"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]r", " ", "=", " ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
           "endPosRight", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], "-", 
           RowBox[{
           "currPosRight", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}]}], ",", " ", 
          RowBox[{
           RowBox[{
           "endPosRight", "\[LeftDoubleBracket]", "2", 
            "\[RightDoubleBracket]"}], " ", "-", "  ", 
           RowBox[{
           "currPosRight", "\[LeftDoubleBracket]", "2", 
            "\[RightDoubleBracket]"}]}]}], " ", "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"moves", " ", ",", " ", "\[CapitalDelta]r"}], "]"}], ";", 
       RowBox[{"currPosRight", "+=", "\[CapitalDelta]r"}], ";", " ", 
       RowBox[{"currPosLeft", "+=", "\[CapitalDelta]r"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathRight", " ", ",", " ", "currPosRight"}], "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathLeft", " ", ",", "currPosLeft"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"\[CapitalDelta]y", " ", "=", " ", 
        RowBox[{
         RowBox[{
         "currPosRight", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}], " ", "-", " ", 
         RowBox[{
         "currPosLeft", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}]}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"current", " ", "distance"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Abs", "[", 
           RowBox[{"\[CapitalDelta]e", "-", "\[CapitalDelta]y"}], "]"}], ">", 
          
          RowBox[{"1", "/", "1000"}]}], " ", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"retVal", " ", "=", 
           RowBox[{"achieveDesiredYspacing", "[", 
            RowBox[{
            "currPosRight", ",", "currPosLeft", ",", "endPosRight", ",", 
             "endPosLeft"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"currPosRight", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
           ";", 
          RowBox[{"currPosLeft", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}],
           ";", 
          RowBox[{"endPosRight", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}],
           ";", 
          RowBox[{"endPosLeft", "=", 
           RowBox[{
           "retVal", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"moves", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"moves", ",", 
             RowBox[{"retVal", "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"pathRight", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"pathRight", " ", ",", 
             RowBox[{"retVal", "\[LeftDoubleBracket]", 
              RowBox[{"6", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], 
          ";", 
          RowBox[{"pathLeft", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"pathLeft", " ", ",", 
             RowBox[{"retVal", "\[LeftDoubleBracket]", 
              RowBox[{"7", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"flip", ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
           "moves", ",", "currPosLeft", ",", "currPosRight", ",", 
            "endPosLeft", ",", "endPosRight", ",", "pathLeft", ",", 
            "pathRight"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
           "moves", ",", "currPosRight", ",", "currPosLeft", ",", 
            "endPosRight", ",", "endPosLeft", ",", "pathRight", ",", 
            "pathLeft"}], "}"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"myCirc", "[", 
      RowBox[{"Progress_", ",", "MyColor_", ",", "MyText_"}], "]"}], ":=", 
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"White", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Progress", "<", "0.95"}], " ", "&&", 
            RowBox[{"Progress", ">", "0.05"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
             RowBox[{"Disk", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", "2"}], "]"}]}], "}"}]}], 
          "]"}], ",", "MyColor", ",", 
         RowBox[{"Thickness", "[", "0.1", "]"}], ",", 
         RowBox[{"Circle", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", "2"}], "]"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{"MyText", ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"Center", ",", "Center"}], "}"}]}], "]"}]}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "20"}]}], "]"}]}], ";"}]}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.6436330620151863`*^9, 3.643633142555245*^9}, {
   3.643634635387471*^9, 3.643634635773616*^9}, {3.64363493510086*^9, 
   3.64363493534129*^9}, {3.643635816124959*^9, 3.6436358204569397`*^9}, {
   3.6436366106330957`*^9, 3.643636617664937*^9}, {3.643636682239799*^9, 
   3.643636694974148*^9}, 3.643636729566121*^9, {3.643636902849749*^9, 
   3.6436369286741333`*^9}, {3.643637089317648*^9, 3.643637103849972*^9}, {
   3.643716442501993*^9, 3.643716447801918*^9}, {3.644132841075902*^9, 
   3.644132875554392*^9}, {3.644135900822158*^9, 3.644136104160116*^9}, {
   3.6441361375657377`*^9, 3.644136187447153*^9}, 3.6441362539073133`*^9, {
   3.644136303167753*^9, 3.644136333030587*^9}, {3.644136417928399*^9, 
   3.644136429191375*^9}, {3.644136564663416*^9, 3.644136579037611*^9}, {
   3.644151452516255*^9, 3.644151471147826*^9}, {3.6441628139359293`*^9, 
   3.644162848484384*^9}, 3.6441629225327883`*^9, {3.6441629890134354`*^9, 
   3.6441630397915125`*^9}, {3.644163419358466*^9, 3.6441634621847477`*^9}, {
   3.6441635476892977`*^9, 3.644163576769205*^9}, {3.6441636111506433`*^9, 
   3.6441636208116093`*^9}, {3.644163758897416*^9, 3.6441637667802043`*^9}, 
   3.644163879803506*^9, 3.6441639104035654`*^9, {3.6441639642099457`*^9, 
   3.6441640529068146`*^9}, {3.6441641211746407`*^9, 3.644164159420015*^9}, {
   3.644164259667015*^9, 3.644164290558015*^9}, {3.644164427862015*^9, 
   3.644164432658015*^9}, {3.644164628012015*^9, 3.6441646816260147`*^9}, 
   3.6441647491980147`*^9, {3.644164784306015*^9, 3.6441648363500147`*^9}, 
   3.651274485412733*^9, {3.651274574982983*^9, 3.651274655776332*^9}, {
   3.651284247507251*^9, 3.651284259218851*^9}, {3.6512847944971123`*^9, 
   3.651284803458172*^9}, {3.651285508330059*^9, 3.65128551725109*^9}, {
   3.6512855608707323`*^9, 3.651285561838027*^9}, {3.651286145755126*^9, 
   3.651286168546471*^9}, 3.651286259798789*^9, {3.651286320784491*^9, 
   3.651286380383204*^9}, 3.6512864243865433`*^9, {3.6512864684121037`*^9, 
   3.65128660567682*^9}, 3.651286672467688*^9, {3.651286707337291*^9, 
   3.651286764017911*^9}, {3.65128682470173*^9, 3.651286872637767*^9}, {
   3.651286950177266*^9, 3.651286953433001*^9}, {3.651287153094515*^9, 
   3.651287157533863*^9}, {3.6512872816294603`*^9, 3.6512872823896933`*^9}, {
   3.6512873423936996`*^9, 3.651287346047942*^9}, 3.651287383929191*^9, {
   3.651287499602868*^9, 3.651287538281274*^9}, {3.651287583875154*^9, 
   3.651287620789282*^9}, {3.65128765538048*^9, 3.6512877005978403`*^9}, {
   3.651287766666272*^9, 3.6512877730010347`*^9}, {3.651287825618966*^9, 
   3.6512878586684732`*^9}, {3.651287927624159*^9, 3.651287939945753*^9}, {
   3.651288095389711*^9, 3.651288104725903*^9}, {3.651288174257298*^9, 
   3.6512882189211063`*^9}, {3.651288250777906*^9, 3.651288295741341*^9}, {
   3.651288351905418*^9, 3.651288353052971*^9}, {3.65128839452958*^9, 
   3.651288711762635*^9}, {3.651288771700984*^9, 3.651288773140184*^9}, {
   3.651288892390339*^9, 3.651288900786592*^9}, {3.65128932260843*^9, 
   3.6512893250783443`*^9}, 3.651289443688414*^9, {3.6512894972878733`*^9, 
   3.651289520243495*^9}, {3.651289869200612*^9, 3.6512900377728863`*^9}, {
   3.6512902100212*^9, 3.651290303355315*^9}, {3.651290486908821*^9, 
   3.65129050484557*^9}, {3.651312195880908*^9, 3.65131221171529*^9}, {
   3.651312299363372*^9, 3.651312588243656*^9}, {3.65131265042866*^9, 
   3.651312848950192*^9}, {3.6513129075806293`*^9, 3.651312918880103*^9}, {
   3.651313843873683*^9, 3.651314006160321*^9}, {3.6513140937453814`*^9, 
   3.651314115833103*^9}, {3.6513158125956593`*^9, 3.651315822085253*^9}, 
   3.651321061059537*^9, {3.651321397300353*^9, 3.6513214082433987`*^9}, {
   3.651321457604948*^9, 3.651321464067905*^9}, 3.651321561536064*^9, 
   3.65132161127604*^9, {3.6513224226449966`*^9, 3.651322479096277*^9}, {
   3.651322630555009*^9, 3.6513226342446003`*^9}, {3.6513226819813137`*^9, 
   3.651322688780385*^9}, {3.651322803656444*^9, 3.6513228073104258`*^9}, {
   3.6513228375365458`*^9, 3.6513228420664873`*^9}, {3.651654385828102*^9, 
   3.6516544503810577`*^9}, {3.651654591489456*^9, 3.651654633693006*^9}, {
   3.6516546945022078`*^9, 3.651654697918765*^9}, {3.6516547444154873`*^9, 
   3.651654751230633*^9}, {3.651655562737743*^9, 3.651655575873966*^9}, {
   3.651655629449305*^9, 3.6516556539444923`*^9}, {3.6516557282240887`*^9, 
   3.65165578524543*^9}, {3.65165583704468*^9, 3.651655854716132*^9}, {
   3.651655886901785*^9, 3.651655887290662*^9}, {3.651656072098123*^9, 
   3.651656086521308*^9}, {3.656243115069004*^9, 3.656243115331913*^9}, {
   3.656246450105616*^9, 3.6562464667372303`*^9}, {3.656246509868662*^9, 
   3.656246515914475*^9}, {3.656246606842991*^9, 3.656246629616315*^9}, {
   3.656246703125251*^9, 3.656246703730777*^9}, {3.6562467589477386`*^9, 
   3.65624679396509*^9}, {3.65624683045613*^9, 3.6562468508366737`*^9}, {
   3.656246926444963*^9, 3.6562469388331947`*^9}, {3.656246990031793*^9, 
   3.656247020868589*^9}, {3.656247592513329*^9, 3.6562477076303177`*^9}},
 CellID->193214940]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"actually", ",", " ", 
    RowBox[{"we", " ", 
     RowBox[{"don", "'"}], "t", " ", "need", " ", "the", " ", "variable", " ",
      "path", " ", "anymore"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "movesAndPositionsX", ",", "path", ",", "movesAndPositionsY", ",", 
        "path1", ",", "path2", ",", "i", ",", "path1o", ",", "path2o", ",", 
        "frac", ",", "progInd", ",", " ", 
        RowBox[{"thickness", " ", "=", " ", "0.005"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"movesAndPositionsX", "=", " ", 
        RowBox[{"achieveDesiredXspacing", "[", 
         RowBox[{"ps1", ",", "ps2", ",", "pe1", ",", "pe2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"movesAndPositionsY", "=", 
        RowBox[{"achieveDesiredYspacing", "[", 
         RowBox[{
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "3", 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "4", 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "5", 
           "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"path", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{
          "movesAndPositionsY", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"path1", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "6", 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{"movesAndPositionsY", "\[LeftDoubleBracket]", 
           RowBox[{"6", ",", 
            RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"path2", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{
          "movesAndPositionsX", "\[LeftDoubleBracket]", "7", 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{"movesAndPositionsY", "\[LeftDoubleBracket]", 
           RowBox[{"7", ",", 
            RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"frac", " ", "=", " ", 
        RowBox[{"FractionalPart", "[", 
         RowBox[{
          RowBox[{"progress", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "path1", "]"}], "-", "1"}], ")"}]}], "+", 
          "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"progInd", " ", "=", " ", 
        RowBox[{
         RowBox[{"Floor", "[", 
          RowBox[{"progress", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "path1", "]"}], "-", "1"}], ")"}]}], 
          "]"}], "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"path1o", " ", "=", " ", 
        RowBox[{"path1", "\[LeftDoubleBracket]", 
         RowBox[{";;", "progInd"}], "\[RightDoubleBracket]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"path2o", " ", "=", " ", 
        RowBox[{"path2", "\[LeftDoubleBracket]", 
         RowBox[{";;", "progInd"}], "\[RightDoubleBracket]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"frac", ">", "0"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"path1o", ",", " ", 
            RowBox[{
             RowBox[{"frac", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"path1", "\[LeftDoubleBracket]", 
                 RowBox[{"progInd", "+", "1"}], "\[RightDoubleBracket]"}], 
                "-", 
                RowBox[{
                "path1", "\[LeftDoubleBracket]", "progInd", 
                 "\[RightDoubleBracket]"}]}], ")"}]}], "+", 
             RowBox[{
             "path1", "\[LeftDoubleBracket]", "progInd", 
              "\[RightDoubleBracket]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"path2o", ",", " ", 
            RowBox[{
             RowBox[{"frac", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"path2", "\[LeftDoubleBracket]", 
                 RowBox[{"progInd", "+", "1"}], "\[RightDoubleBracket]"}], 
                "-", 
                RowBox[{
                "path2", "\[LeftDoubleBracket]", "progInd", 
                 "\[RightDoubleBracket]"}]}], ")"}]}], "+", 
             RowBox[{
             "path2", "\[LeftDoubleBracket]", "progInd", 
              "\[RightDoubleBracket]"}]}]}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Graphics", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", "workspace", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"White", ",", " ", 
           RowBox[{"Rectangle", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "0.05"}], 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], ",", 
             RowBox[{"1.05", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"Darker", "[", "Red", "]"}], ",", " ", 
           RowBox[{"Rectangle", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "0.025"}], 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], ",", 
             RowBox[{"1.025", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", "White", ",", 
           " ", 
           RowBox[{"Rectangle", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"starting", " ", "poses"}], ",", " ", 
             RowBox[{
             "dashed", " ", "line", " ", "from", " ", "start", " ", "to", " ",
               "end"}]}], "*)"}], "\[IndentingNewLine]", "Blue", ",", 
           "       ", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Directive", "[", 
              RowBox[{
               RowBox[{"Thickness", "[", "thickness", "]"}], ",", "Dashed", 
               ",", 
               RowBox[{"Opacity", "[", ".3", "]"}]}], "]"}], ",", 
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{"ps1", ",", "pe1"}], "}"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "Magenta", ",", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"Directive", "[", 
              RowBox[{
               RowBox[{"Thickness", "[", "thickness", "]"}], ",", "Dashed", 
               ",", 
               RowBox[{"Opacity", "[", ".3", "]"}]}], "]"}], ",", 
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{"ps2", ",", "pe2"}], "}"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"ending", " ", "pose"}], ",", " ", 
             RowBox[{
             "line", " ", "of", " ", "arrows", " ", "showing", " ", 
              "path"}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Thickness", "[", "thickness", "]"}], ",", 
           "\[IndentingNewLine]", "Blue", ",", "       ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Darker", "[", "Blue", "]"}], ",", " ", 
             RowBox[{"Point", "@", 
              RowBox[{"{", 
               RowBox[{"Last", "[", "path1o", "]"}], " ", "}"}]}]}], "}"}], 
           ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"path1o", "\[LeftDoubleBracket]", 
                 RowBox[{"i", ",", ";;"}], "\[RightDoubleBracket]"}], ",", 
                RowBox[{"path1o", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{"i", "+", "1"}], ",", ";;"}], 
                 "\[RightDoubleBracket]"}]}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{
                RowBox[{"Length", "[", "path1o", "]"}], "-", "1"}]}], "}"}]}],
             "]"}], ",", "\[IndentingNewLine]", "Magenta", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Darker", "[", "Magenta", "]"}], ",", " ", 
             RowBox[{"Point", "@", 
              RowBox[{"{", 
               RowBox[{"Last", "[", "path2o", "]"}], " ", "}"}]}]}], "}"}], 
           ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"path2o", "\[LeftDoubleBracket]", 
                 RowBox[{"i", ",", ";;"}], "\[RightDoubleBracket]"}], ",", 
                RowBox[{"path2o", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{"i", "+", "1"}], ",", ";;"}], 
                 "\[RightDoubleBracket]"}]}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{
                RowBox[{"Length", "[", "path2o", "]"}], "-", "1"}]}], "}"}]}],
             "]"}]}], "\[IndentingNewLine]", "}"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"progress", ",", "0.2"}], "}"}], ",", "Slider", ",", 
      RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ps1", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"4", "/", "5"}], ",", 
          RowBox[{"3", "/", "4"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", "Locator", ",", 
      RowBox[{"Appearance", "\[Rule]", 
       RowBox[{"myCirc", "[", 
        RowBox[{
        "progress", ",", "Blue", ",", 
         "\"\<\!\(\*SubscriptBox[\(s\), \(1\)]\)\>\""}], "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ps2", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "/", "4"}], ",", 
          RowBox[{"1", "/", "2"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", "Locator", ",", 
      RowBox[{"Appearance", "\[Rule]", 
       RowBox[{"myCirc", "[", 
        RowBox[{
        "progress", ",", "Magenta", ",", 
         "\"\<\!\(\*SubscriptBox[\(s\), \(2\)]\)\>\""}], "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pe1", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "/", "4"}], ",", 
          RowBox[{"3", "/", "4"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", "Locator", ",", 
      RowBox[{"Appearance", "\[Rule]", 
       RowBox[{"myCirc", "[", 
        RowBox[{
        "progress", ",", "Blue", ",", 
         "\"\<\!\(\*SubscriptBox[\(e\), \(1\)]\)\>\""}], "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pe2", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"4", "/", "5"}], ",", 
          RowBox[{"1", "/", "2"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", "Locator", ",", 
      RowBox[{"Appearance", "\[Rule]", 
       RowBox[{"myCirc", "[", 
        RowBox[{
        "progress", ",", "Magenta", ",", 
         "\"\<\!\(\*SubscriptBox[\(e\), \(2\)]\)\>\""}], "]"}]}]}], "}"}], 
    ",", " ", 
    RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.656243134637032*^9, 3.656243153744245*^9}, {
  3.656243194966514*^9, 3.656243211556278*^9}, {3.6562432528852882`*^9, 
  3.6562432533884487`*^9}, {3.65624647350469*^9, 3.656246473688068*^9}, {
  3.656246600181221*^9, 3.656246600420102*^9}, {3.656247719982877*^9, 
  3.656247722101948*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pe1$$ = {0.25, 0.75}, $CellContext`pe2$$ = {
    0.28150000000000003`, 0}, $CellContext`progress$$ = 
    0.2, $CellContext`ps1$$ = {0.5825, 
    0.41000000000000003`}, $CellContext`ps2$$ = {0.9015, 0.541}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`progress$$], 0.2}, 0, 1}, {{
       Hold[$CellContext`ps1$$], {
        Rational[4, 5], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`ps2$$], {
        Rational[1, 4], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe1$$], {
        Rational[1, 4], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe2$$], {
        Rational[4, 5], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}}, Typeset`size$$ = {
    576., {285., 290.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`progress$575408$$ = 
    0, $CellContext`ps1$575409$$ = {0, 0}, $CellContext`ps2$575410$$ = {0, 
    0}, $CellContext`pe1$575411$$ = {0, 0}, $CellContext`pe2$575412$$ = {0, 
    0}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`pe1$$ = {
          Rational[1, 4], 
          Rational[3, 4]}, $CellContext`pe2$$ = {
          Rational[4, 5], 
          Rational[1, 2]}, $CellContext`progress$$ = 0.2, $CellContext`ps1$$ = {
          Rational[4, 5], 
          Rational[3, 4]}, $CellContext`ps2$$ = {
          Rational[1, 4], 
          Rational[1, 2]}}, "ControllerVariables" :> {
        Hold[$CellContext`progress$$, $CellContext`progress$575408$$, 0], 
        Hold[$CellContext`ps1$$, $CellContext`ps1$575409$$, {0, 0}], 
        Hold[$CellContext`ps2$$, $CellContext`ps2$575410$$, {0, 0}], 
        Hold[$CellContext`pe1$$, $CellContext`pe1$575411$$, {0, 0}], 
        Hold[$CellContext`pe2$$, $CellContext`pe2$575412$$, {0, 0}]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositionsX$, $CellContext`path$, \
$CellContext`movesAndPositionsY$, $CellContext`path1$, $CellContext`path2$, \
$CellContext`i$, $CellContext`path1o$, $CellContext`path2o$, \
$CellContext`frac$, $CellContext`progInd$, $CellContext`thickness$ = 
         0.005}, $CellContext`movesAndPositionsX$ = \
$CellContext`achieveDesiredXspacing[$CellContext`ps1$$, $CellContext`ps2$$, \
$CellContext`pe1$$, $CellContext`pe2$$]; $CellContext`movesAndPositionsY$ = \
$CellContext`achieveDesiredYspacing[
           Part[$CellContext`movesAndPositionsX$, 2], 
           Part[$CellContext`movesAndPositionsX$, 3], 
           Part[$CellContext`movesAndPositionsX$, 4], 
           Part[$CellContext`movesAndPositionsX$, 5]]; $CellContext`path$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 1], 
           Part[$CellContext`movesAndPositionsY$, 1]]; $CellContext`path1$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 6], 
           Part[$CellContext`movesAndPositionsY$, 6, 
            Span[2, All]]]; $CellContext`path2$ = Join[
           Part[$CellContext`movesAndPositionsX$, 7], 
           Part[$CellContext`movesAndPositionsY$, 7, 
            Span[2, All]]]; $CellContext`frac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path1$] - 
             1) + 1]; $CellContext`progInd$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path1$] - 1)] + 
          1; $CellContext`path1o$ = Part[$CellContext`path1$, 
           Span[1, $CellContext`progInd$]]; $CellContext`path2o$ = 
         Part[$CellContext`path2$, 
           Span[1, $CellContext`progInd$]]; 
        If[$CellContext`frac$ > 0, 
          AppendTo[$CellContext`path1o$, $CellContext`frac$ (
              Part[$CellContext`path1$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path1$, $CellContext`progInd$]) + 
            Part[$CellContext`path1$, $CellContext`progInd$]]; 
          AppendTo[$CellContext`path2o$, $CellContext`frac$ (
              Part[$CellContext`path2$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path2$, $CellContext`progInd$]) + 
            Part[$CellContext`path2$, $CellContext`progInd$]]; Null]; 
        Graphics[{White, 
           Rectangle[(-0.05) {1, 1}, 1.05 {1, 1}], 
           Darker[Red], 
           Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}], White, 
           Rectangle[{0, 0}, {1, 1}], 
           PointSize[0.02], Blue, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps1$$, $CellContext`pe1$$}]}, Magenta, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps2$$, $CellContext`pe2$$}]}, 
           Thickness[$CellContext`thickness$], Blue, {
            Darker[Blue], 
            Point[{
              Last[$CellContext`path1o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path1o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path1o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path1o$] - 1}], Magenta, {
            Darker[Magenta], 
            Point[{
              Last[$CellContext`path2o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path2o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path2o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path2o$] - 1}]}, ImageSize -> Large]], 
      "Specifications" :> {{{$CellContext`progress$$, 0.2}, 0, 1, ControlType -> 
         Slider, Appearance -> "Labeled"}, {{$CellContext`ps1$$, {
           Rational[4, 5], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(s\), \(1\)]\)"]]}, {{$CellContext`ps2$$, {
           Rational[1, 4], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(s\), \(2\)]\)"]]}, {{$CellContext`pe1$$, {
           Rational[1, 4], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(e\), \(1\)]\)"]]}, {{$CellContext`pe2$$, {
           Rational[4, 5], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(e\), \(2\)]\)"]]}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{625., {331., 336.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`achieveDesiredXspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`retVal, $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]s, $CellContext`L, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r, \
$CellContext`moves, $CellContext`poses, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startTop, $CellContext`pathTop, \
$CellContext`pathBottom, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 2] > 
           Part[$CellContext`ps2, 
             2], $CellContext`currPosTop = $CellContext`ps1; \
$CellContext`currPosBottom = $CellContext`ps2; $CellContext`endPosTop = \
$CellContext`pe1; $CellContext`endPosBottom = $CellContext`pe2; 
           Null, $CellContext`currPosTop = $CellContext`ps2; \
$CellContext`currPosBottom = $CellContext`ps1; $CellContext`endPosTop = \
$CellContext`pe2; $CellContext`endPosBottom = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startTop = $CellContext`currPosTop; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosTop, 1] - 
           Part[$CellContext`endPosBottom, 1]; $CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathTop = {$CellContext`currPosTop}; \
$CellContext`pathBottom = {$CellContext`currPosBottom}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]s == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = {
             Part[$CellContext`endPosTop, 1] - 
              Part[$CellContext`currPosTop, 1], 0}; 
           AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
           AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; 
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; \
$CellContext`\[CapitalDelta]r = {
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosTop, 1], 
              
              Part[$CellContext`currPosBottom, 
               1]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosTop, 1], 
                
                Part[$CellContext`currPosBottom, 
                 1]] + $CellContext`my\[Epsilon]], 
            0}; $CellContext`\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + \
{0, -Part[$CellContext`currPosBottom, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]s > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s], $CellContext`L - 
              Part[$CellContext`currPosTop, 1]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]s], 
               Part[$CellContext`currPosTop, 1]]], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {0, $CellContext`my\[Epsilon]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; \
$CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; 
         If[Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s] > 
           1/1000, $CellContext`retVal = \
$CellContext`achieveDesiredXspacing[$CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom]; $CellContext`currPosTop = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosBottom = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosTop = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosBottom = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathTop = 
            Join[$CellContext`pathTop, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathBottom = 
            Join[$CellContext`pathBottom, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosBottom, \
$CellContext`currPosTop, $CellContext`endPosBottom, $CellContext`endPosTop, \
$CellContext`pathBottom, $CellContext`pathTop}], 
           
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; 
         Null], $CellContext`achieveDesiredXspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]], 
         Pattern[$CellContext`ct, 
          Blank[]]] := 
       Module[{$CellContext`retVal, $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]s, $CellContext`L, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r, \
$CellContext`moves, $CellContext`poses, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startTop, $CellContext`pathTop, \
$CellContext`pathBottom, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 2] > 
           Part[$CellContext`ps2, 
             2], $CellContext`currPosTop = $CellContext`ps1; \
$CellContext`currPosBottom = $CellContext`ps2; $CellContext`endPosTop = \
$CellContext`pe1; $CellContext`endPosBottom = $CellContext`pe2; 
           Null, $CellContext`currPosTop = $CellContext`ps2; \
$CellContext`currPosBottom = $CellContext`ps1; $CellContext`endPosTop = \
$CellContext`pe2; $CellContext`endPosBottom = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startTop = $CellContext`currPosTop; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosTop, 1] - 
           Part[$CellContext`endPosBottom, 1]; $CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathTop = {$CellContext`currPosTop}; \
$CellContext`pathBottom = {$CellContext`currPosBottom}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]s == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = {
             Part[$CellContext`endPosTop, 1] - 
              Part[$CellContext`currPosTop, 1], 0}; 
           AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
           AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; 
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; \
$CellContext`\[CapitalDelta]r = {
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosTop, 1], 
              
              Part[$CellContext`currPosBottom, 
               1]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosTop, 1], 
                
                Part[$CellContext`currPosBottom, 
                 1]] + $CellContext`my\[Epsilon]], 
            
            0}; $CellContext`\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + \
{0, -Part[$CellContext`currPosBottom, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]s > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s], $CellContext`L - 
              Part[$CellContext`currPosTop, 1]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]s], 
               Part[$CellContext`currPosTop, 1]]], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {0, $CellContext`my\[Epsilon]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; \
$CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; If[
           
           And[$CellContext`\[CapitalDelta]e != \
$CellContext`\[CapitalDelta]s, $CellContext`ct < 2000], 
           If[$CellContext`ct > 1022, 
             
             Print[{$CellContext`\[CapitalDelta]e, $CellContext`\
\[CapitalDelta]s, $CellContext`currPosTop, $CellContext`currPosBottom, \
$CellContext`endPosTop, $CellContext`endPosBottom}]]; $CellContext`retVal = \
$CellContext`achieveDesiredXspacing[$CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`ct + 1]; $CellContext`currPosTop = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosBottom = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosTop = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosBottom = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathTop = 
            Join[$CellContext`pathTop, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathBottom = 
            Join[$CellContext`pathBottom, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosBottom, \
$CellContext`currPosTop, $CellContext`endPosBottom, $CellContext`endPosTop, \
$CellContext`pathBottom, $CellContext`pathTop}], 
           
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; 
         Null], $CellContext`achieveDesiredYspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]e, $CellContext`\[CapitalDelta]y, \
$CellContext`L, $CellContext`retVal, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r, $CellContext`moves, \
$CellContext`endPosRight, $CellContext`endPosLeft, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startRight, $CellContext`pathRight, \
$CellContext`pathLeft, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 1] > 
           Part[$CellContext`ps2, 
             1], $CellContext`currPosRight = $CellContext`ps1; \
$CellContext`currPosLeft = $CellContext`ps2; $CellContext`endPosRight = \
$CellContext`pe1; $CellContext`endPosLeft = $CellContext`pe2; 
           Null, $CellContext`currPosRight = $CellContext`ps2; \
$CellContext`currPosLeft = $CellContext`ps1; $CellContext`endPosRight = \
$CellContext`pe2; $CellContext`endPosLeft = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startRight = $CellContext`currPosRight; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosRight, 2] - 
           Part[$CellContext`endPosLeft, 2]; $CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathRight = {$CellContext`currPosRight}; \
$CellContext`pathLeft = {$CellContext`currPosLeft}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]y == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = $CellContext`endPosRight - \
$CellContext`currPosRight; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
           AppendTo[$CellContext`pathLeft, $CellContext`endPosLeft]; 
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]; \
$CellContext`\[CapitalDelta]r = {0, 
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosRight, 2], 
              
              Part[$CellContext`currPosLeft, 
               2]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosRight, 2], 
                
                Part[$CellContext`currPosLeft, 
                 2]] + $CellContext`my\[Epsilon]]}; $CellContext`\
\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + {-
             Part[$CellContext`currPosLeft, 1], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {0, 
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]y > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y], $CellContext`L - 
              Part[$CellContext`currPosRight, 2]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]y], 
               Part[$CellContext`currPosRight, 2]]]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {$CellContext`my\[Epsilon], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {
           Part[$CellContext`endPosRight, 1] - 
            Part[$CellContext`currPosRight, 1], 
            Part[$CellContext`endPosRight, 2] - 
            Part[$CellContext`currPosRight, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; 
         If[Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y] > 
           1/1000, $CellContext`retVal = \
$CellContext`achieveDesiredYspacing[$CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft]; \
$CellContext`currPosRight = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosLeft = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosRight = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosLeft = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathRight = 
            Join[$CellContext`pathRight, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathLeft = 
            Join[$CellContext`pathLeft, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosLeft, \
$CellContext`currPosRight, $CellContext`endPosLeft, $CellContext`endPosRight, \
$CellContext`pathLeft, $CellContext`pathRight}], 
           
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]], \
$CellContext`achieveDesiredYspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]], 
         Pattern[$CellContext`ct, 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]e, $CellContext`\[CapitalDelta]y, \
$CellContext`L, $CellContext`retVal, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r, $CellContext`moves, \
$CellContext`endPosRight, $CellContext`endPosLeft, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startRight, $CellContext`pathRight, \
$CellContext`pathLeft, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 1] > 
           Part[$CellContext`ps2, 
             1], $CellContext`currPosRight = $CellContext`ps1; \
$CellContext`currPosLeft = $CellContext`ps2; $CellContext`endPosRight = \
$CellContext`pe1; $CellContext`endPosLeft = $CellContext`pe2; 
           Null, $CellContext`currPosRight = $CellContext`ps2; \
$CellContext`currPosLeft = $CellContext`ps1; $CellContext`endPosRight = \
$CellContext`pe2; $CellContext`endPosLeft = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startRight = $CellContext`currPosRight; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosRight, 2] - 
           Part[$CellContext`endPosLeft, 2]; $CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathRight = {$CellContext`currPosRight}; \
$CellContext`pathLeft = {$CellContext`currPosLeft}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]y == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = $CellContext`endPosRight - \
$CellContext`currPosRight; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
           AppendTo[$CellContext`pathLeft, $CellContext`endPosLeft]; 
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]; \
$CellContext`\[CapitalDelta]r = {0, 
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosRight, 2], 
              Part[$CellContext`currPosLeft, 
               2]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosRight, 2], 
                
                Part[$CellContext`currPosLeft, 
                 2]] + $CellContext`my\[Epsilon]]}; $CellContext`\
\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + {-
             Part[$CellContext`currPosLeft, 1], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {0, 
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]y > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y], $CellContext`L - 
              Part[$CellContext`currPosRight, 2]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]y], 
               Part[$CellContext`currPosRight, 2]]]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {$CellContext`my\[Epsilon], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {
           Part[$CellContext`endPosRight, 1] - 
            Part[$CellContext`currPosRight, 1], 
            Part[$CellContext`endPosRight, 2] - 
            Part[$CellContext`currPosRight, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; If[
           
           And[$CellContext`\[CapitalDelta]e != \
$CellContext`\[CapitalDelta]y, $CellContext`ct < 10], 
           If[$CellContext`ct > 9, 
             
             Print[{$CellContext`\[CapitalDelta]e, $CellContext`\
\[CapitalDelta]y, $CellContext`currPosRight, $CellContext`currPosLeft, \
$CellContext`endPosRight, $CellContext`endPosLeft}]]; $CellContext`retVal = \
$CellContext`achieveDesiredYspacing[$CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`ct + 1]; $CellContext`currPosRight = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosLeft = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosRight = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosLeft = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathRight = 
            Join[$CellContext`pathRight, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathLeft = 
            Join[$CellContext`pathLeft, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosLeft, \
$CellContext`currPosRight, $CellContext`endPosLeft, $CellContext`endPosRight, \
$CellContext`pathLeft, $CellContext`pathRight}], 
           
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]], $CellContext`myCirc[
         Pattern[$CellContext`Progress, 
          Blank[]], 
         Pattern[$CellContext`MyColor, 
          Blank[]], 
         Pattern[$CellContext`MyText, 
          Blank[]]] := Graphics[{White, 
          If[
           And[$CellContext`Progress < 0.95, $CellContext`Progress > 0.05], {
            Opacity[0.5], 
            Disk[{0, 0}, 2]}], $CellContext`MyColor, 
          Thickness[0.1], 
          Circle[{0, 0}, 2], 
          Text[$CellContext`MyText, {0, 0}, {Center, Center}]}, ImageSize -> 
         20]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6562432120991087`*^9, 3.6562464092757063`*^9, {3.656246474326404*^9, 
   3.65624648253856*^9}, 3.6562465588940163`*^9, 3.6562466380816803`*^9, 
   3.656246802227315*^9, 3.656246855826336*^9, 3.6562477258437157`*^9},
 CellID->2058388153]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell[TextData[{
 "How can two particles in a 2D workspace, that are steered by the ",
 StyleBox["same",
  FontSlant->"Italic"],
 " global control signal, be moved to arbitrary ending positions?  This is \
hard because the control input is ",
 StyleBox["symmetric",
  FontSlant->"Italic"],
 ".  We provide an algorithm to bring the particles to desired final \
positions that uses friction with walls (dark red boundaries) to break \
symmetry."
}], "ManipulateCaption",
 CellChangeTimes->{{3.656243390745927*^9, 3.65624359675194*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pe1$$ = {0.25, 0.75}, $CellContext`pe2$$ = {
    0.8, 0.5}, $CellContext`progress$$ = 0.98, $CellContext`ps1$$ = {0.8, 
    0.75}, $CellContext`ps2$$ = {0.3715, 0.514}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`progress$$], 0.2}, 0, 1}, {{
       Hold[$CellContext`ps1$$], {
        Rational[4, 5], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`ps2$$], {
        Rational[1, 4], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe1$$], {
        Rational[1, 4], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe2$$], {
        Rational[4, 5], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}}, Typeset`size$$ = {
    576., {285., 290.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`progress$146733$$ = 
    0, $CellContext`ps1$146734$$ = {0, 0}, $CellContext`ps2$146735$$ = {0, 
    0}, $CellContext`pe1$146736$$ = {0, 0}, $CellContext`pe2$146737$$ = {0, 
    0}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`pe1$$ = {
          Rational[1, 4], 
          Rational[3, 4]}, $CellContext`pe2$$ = {
          Rational[4, 5], 
          Rational[1, 2]}, $CellContext`progress$$ = 0.2, $CellContext`ps1$$ = {
          Rational[4, 5], 
          Rational[3, 4]}, $CellContext`ps2$$ = {
          Rational[1, 4], 
          Rational[1, 2]}}, "ControllerVariables" :> {
        Hold[$CellContext`progress$$, $CellContext`progress$146733$$, 0], 
        Hold[$CellContext`ps1$$, $CellContext`ps1$146734$$, {0, 0}], 
        Hold[$CellContext`ps2$$, $CellContext`ps2$146735$$, {0, 0}], 
        Hold[$CellContext`pe1$$, $CellContext`pe1$146736$$, {0, 0}], 
        Hold[$CellContext`pe2$$, $CellContext`pe2$146737$$, {0, 0}]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositionsX$, $CellContext`path$, \
$CellContext`movesAndPositionsY$, $CellContext`path1$, $CellContext`path2$, \
$CellContext`i$, $CellContext`path1o$, $CellContext`path2o$, \
$CellContext`frac$, $CellContext`progInd$, $CellContext`thickness$ = 
         0.005}, $CellContext`movesAndPositionsX$ = \
$CellContext`achieveDesiredXspacing[$CellContext`ps1$$, $CellContext`ps2$$, \
$CellContext`pe1$$, $CellContext`pe2$$]; $CellContext`movesAndPositionsY$ = \
$CellContext`achieveDesiredYspacing[
           Part[$CellContext`movesAndPositionsX$, 2], 
           Part[$CellContext`movesAndPositionsX$, 3], 
           Part[$CellContext`movesAndPositionsX$, 4], 
           Part[$CellContext`movesAndPositionsX$, 5]]; $CellContext`path$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 1], 
           Part[$CellContext`movesAndPositionsY$, 1]]; $CellContext`path1$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 6], 
           Part[$CellContext`movesAndPositionsY$, 6, 
            Span[2, All]]]; $CellContext`path2$ = Join[
           Part[$CellContext`movesAndPositionsX$, 7], 
           Part[$CellContext`movesAndPositionsY$, 7, 
            Span[2, All]]]; $CellContext`frac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path1$] - 
             1) + 1]; $CellContext`progInd$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path1$] - 1)] + 
          1; $CellContext`path1o$ = Part[$CellContext`path1$, 
           Span[1, $CellContext`progInd$]]; $CellContext`path2o$ = 
         Part[$CellContext`path2$, 
           Span[1, $CellContext`progInd$]]; 
        If[$CellContext`frac$ > 0, 
          AppendTo[$CellContext`path1o$, $CellContext`frac$ (
              Part[$CellContext`path1$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path1$, $CellContext`progInd$]) + 
            Part[$CellContext`path1$, $CellContext`progInd$]]; 
          AppendTo[$CellContext`path2o$, $CellContext`frac$ (
              Part[$CellContext`path2$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path2$, $CellContext`progInd$]) + 
            Part[$CellContext`path2$, $CellContext`progInd$]]; Null]; 
        Graphics[{White, 
           Rectangle[(-0.05) {1, 1}, 1.05 {1, 1}], 
           Darker[Red], 
           Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}], White, 
           Rectangle[{0, 0}, {1, 1}], 
           PointSize[0.02], Blue, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps1$$, $CellContext`pe1$$}]}, Magenta, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps2$$, $CellContext`pe2$$}]}, 
           Thickness[$CellContext`thickness$], Blue, {
            Darker[Blue], 
            Point[{
              Last[$CellContext`path1o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path1o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path1o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path1o$] - 1}], Magenta, {
            Darker[Magenta], 
            Point[{
              Last[$CellContext`path2o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path2o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path2o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path2o$] - 1}]}, ImageSize -> Large]], 
      "Specifications" :> {{{$CellContext`progress$$, 0.2}, 0, 1, ControlType -> 
         Slider, Appearance -> "Labeled"}, {{$CellContext`ps1$$, {
           Rational[4, 5], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(s\), \(1\)]\)"]]}, {{$CellContext`ps2$$, {
           Rational[1, 4], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(s\), \(2\)]\)"]]}, {{$CellContext`pe1$$, {
           Rational[1, 4], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(e\), \(1\)]\)"]]}, {{$CellContext`pe2$$, {
           Rational[4, 5], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(e\), \(2\)]\)"]]}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{625., {331., 336.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`achieveDesiredXspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`retVal, $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]s, $CellContext`L, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r, \
$CellContext`moves, $CellContext`poses, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startTop, $CellContext`pathTop, \
$CellContext`pathBottom, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 2] > 
           Part[$CellContext`ps2, 
             2], $CellContext`currPosTop = $CellContext`ps1; \
$CellContext`currPosBottom = $CellContext`ps2; $CellContext`endPosTop = \
$CellContext`pe1; $CellContext`endPosBottom = $CellContext`pe2; 
           Null, $CellContext`currPosTop = $CellContext`ps2; \
$CellContext`currPosBottom = $CellContext`ps1; $CellContext`endPosTop = \
$CellContext`pe2; $CellContext`endPosBottom = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startTop = $CellContext`currPosTop; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosTop, 1] - 
           Part[$CellContext`endPosBottom, 1]; $CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathTop = {$CellContext`currPosTop}; \
$CellContext`pathBottom = {$CellContext`currPosBottom}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]s == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = {
             Part[$CellContext`endPosTop, 1] - 
              Part[$CellContext`currPosTop, 1], 0}; 
           AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
           AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; 
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; \
$CellContext`\[CapitalDelta]r = {
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosTop, 1], 
              Part[$CellContext`currPosBottom, 
               1]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosTop, 1], 
                
                Part[$CellContext`currPosBottom, 
                 1]] + $CellContext`my\[Epsilon]], 
            0}; $CellContext`\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + \
{0, -Part[$CellContext`currPosBottom, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]s > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s], $CellContext`L - 
              Part[$CellContext`currPosTop, 1]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]s], 
               Part[$CellContext`currPosTop, 1]]], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {0, $CellContext`my\[Epsilon]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; \
$CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]s, \
$CellContext`retVal = \
$CellContext`achieveDesiredXspacing[$CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom]; $CellContext`currPosTop = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosBottom = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosTop = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosBottom = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathTop = 
            Join[$CellContext`pathTop, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathBottom = 
            Join[$CellContext`pathBottom, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosBottom, \
$CellContext`currPosTop, $CellContext`endPosBottom, $CellContext`endPosTop, \
$CellContext`pathBottom, $CellContext`pathTop}], 
           
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; 
         Null], $CellContext`achieveDesiredYspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]e, $CellContext`\[CapitalDelta]y, \
$CellContext`L, $CellContext`retVal, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r, $CellContext`moves, \
$CellContext`endPosRight, $CellContext`endPosLeft, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startRight, $CellContext`pathRight, \
$CellContext`pathLeft, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 1] > 
           Part[$CellContext`ps2, 
             1], $CellContext`currPosRight = $CellContext`ps1; \
$CellContext`currPosLeft = $CellContext`ps2; $CellContext`endPosRight = \
$CellContext`pe1; $CellContext`endPosLeft = $CellContext`pe2; 
           Null, $CellContext`currPosRight = $CellContext`ps2; \
$CellContext`currPosLeft = $CellContext`ps1; $CellContext`endPosRight = \
$CellContext`pe2; $CellContext`endPosLeft = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startRight = $CellContext`currPosRight; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosRight, 2] - 
           Part[$CellContext`endPosLeft, 2]; $CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathRight = {$CellContext`currPosRight}; \
$CellContext`pathLeft = {$CellContext`currPosLeft}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]y == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = $CellContext`endPosRight - \
$CellContext`currPosRight; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
           AppendTo[$CellContext`pathLeft, $CellContext`endPosLeft]; 
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]; \
$CellContext`\[CapitalDelta]r = {0, 
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosRight, 2], 
              
              Part[$CellContext`currPosLeft, 
               2]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosRight, 2], 
                
                Part[$CellContext`currPosLeft, 
                 2]] + $CellContext`my\[Epsilon]]}; $CellContext`\
\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + {-
             Part[$CellContext`currPosLeft, 1], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {0, 
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]y > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y], $CellContext`L - 
              Part[$CellContext`currPosRight, 2]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]y], 
               Part[$CellContext`currPosRight, 2]]]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {$CellContext`my\[Epsilon], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {
           Part[$CellContext`endPosRight, 1] - 
            Part[$CellContext`currPosRight, 1], 
            Part[$CellContext`endPosRight, 2] - 
            Part[$CellContext`currPosRight, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]y, \
$CellContext`retVal = \
$CellContext`achieveDesiredYspacing[$CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft]; \
$CellContext`currPosRight = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosLeft = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosRight = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosLeft = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathRight = 
            Join[$CellContext`pathRight, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathLeft = 
            Join[$CellContext`pathLeft, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosLeft, \
$CellContext`currPosRight, $CellContext`endPosLeft, $CellContext`endPosRight, \
$CellContext`pathLeft, $CellContext`pathRight}], 
           
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]], $CellContext`myCirc[
         Pattern[$CellContext`Progress, 
          Blank[]], 
         Pattern[$CellContext`MyColor, 
          Blank[]], 
         Pattern[$CellContext`MyText, 
          Blank[]]] := Graphics[{White, 
          If[
           And[$CellContext`Progress < 0.95, $CellContext`Progress > 0.05], {
            Opacity[0.5], 
            Disk[{0, 0}, 2]}], $CellContext`MyColor, 
          Thickness[0.1], 
          Circle[{0, 0}, 2], 
          Text[$CellContext`MyText, {0, 0}, {Center, Center}]}, ImageSize -> 
         20]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6562432120991087`*^9},
 CellID->2146656257]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pe1$$ = {0.706, 
    0.8180000000000001}, $CellContext`pe2$$ = {0.483, 
    0.07100000000000001}, $CellContext`progress$$ = 
    0.98, $CellContext`ps1$$ = {0.12, 0.637}, $CellContext`ps2$$ = {0.5605, 
    0.217}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`progress$$], 0.2}, 0, 1}, {{
       Hold[$CellContext`ps1$$], {
        Rational[4, 5], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`ps2$$], {
        Rational[1, 4], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe1$$], {
        Rational[1, 4], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe2$$], {
        Rational[4, 5], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}}, Typeset`size$$ = {
    576., {285., 290.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`progress$146733$$ = 
    0, $CellContext`ps1$146734$$ = {0, 0}, $CellContext`ps2$146735$$ = {0, 
    0}, $CellContext`pe1$146736$$ = {0, 0}, $CellContext`pe2$146737$$ = {0, 
    0}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`pe1$$ = {
          Rational[1, 4], 
          Rational[3, 4]}, $CellContext`pe2$$ = {
          Rational[4, 5], 
          Rational[1, 2]}, $CellContext`progress$$ = 0.2, $CellContext`ps1$$ = {
          Rational[4, 5], 
          Rational[3, 4]}, $CellContext`ps2$$ = {
          Rational[1, 4], 
          Rational[1, 2]}}, "ControllerVariables" :> {
        Hold[$CellContext`progress$$, $CellContext`progress$146733$$, 0], 
        Hold[$CellContext`ps1$$, $CellContext`ps1$146734$$, {0, 0}], 
        Hold[$CellContext`ps2$$, $CellContext`ps2$146735$$, {0, 0}], 
        Hold[$CellContext`pe1$$, $CellContext`pe1$146736$$, {0, 0}], 
        Hold[$CellContext`pe2$$, $CellContext`pe2$146737$$, {0, 0}]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositionsX$, $CellContext`path$, \
$CellContext`movesAndPositionsY$, $CellContext`path1$, $CellContext`path2$, \
$CellContext`i$, $CellContext`path1o$, $CellContext`path2o$, \
$CellContext`frac$, $CellContext`progInd$, $CellContext`thickness$ = 
         0.005}, $CellContext`movesAndPositionsX$ = \
$CellContext`achieveDesiredXspacing[$CellContext`ps1$$, $CellContext`ps2$$, \
$CellContext`pe1$$, $CellContext`pe2$$]; $CellContext`movesAndPositionsY$ = \
$CellContext`achieveDesiredYspacing[
           Part[$CellContext`movesAndPositionsX$, 2], 
           Part[$CellContext`movesAndPositionsX$, 3], 
           Part[$CellContext`movesAndPositionsX$, 4], 
           Part[$CellContext`movesAndPositionsX$, 5]]; $CellContext`path$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 1], 
           Part[$CellContext`movesAndPositionsY$, 1]]; $CellContext`path1$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 6], 
           Part[$CellContext`movesAndPositionsY$, 6, 
            Span[2, All]]]; $CellContext`path2$ = Join[
           Part[$CellContext`movesAndPositionsX$, 7], 
           Part[$CellContext`movesAndPositionsY$, 7, 
            Span[2, All]]]; $CellContext`frac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path1$] - 
             1) + 1]; $CellContext`progInd$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path1$] - 1)] + 
          1; $CellContext`path1o$ = Part[$CellContext`path1$, 
           Span[1, $CellContext`progInd$]]; $CellContext`path2o$ = 
         Part[$CellContext`path2$, 
           Span[1, $CellContext`progInd$]]; 
        If[$CellContext`frac$ > 0, 
          AppendTo[$CellContext`path1o$, $CellContext`frac$ (
              Part[$CellContext`path1$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path1$, $CellContext`progInd$]) + 
            Part[$CellContext`path1$, $CellContext`progInd$]]; 
          AppendTo[$CellContext`path2o$, $CellContext`frac$ (
              Part[$CellContext`path2$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path2$, $CellContext`progInd$]) + 
            Part[$CellContext`path2$, $CellContext`progInd$]]; Null]; 
        Graphics[{White, 
           Rectangle[(-0.05) {1, 1}, 1.05 {1, 1}], 
           Darker[Red], 
           Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}], White, 
           Rectangle[{0, 0}, {1, 1}], 
           PointSize[0.02], Blue, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps1$$, $CellContext`pe1$$}]}, Magenta, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps2$$, $CellContext`pe2$$}]}, 
           Thickness[$CellContext`thickness$], Blue, {
            Darker[Blue], 
            Point[{
              Last[$CellContext`path1o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path1o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path1o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path1o$] - 1}], Magenta, {
            Darker[Magenta], 
            Point[{
              Last[$CellContext`path2o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path2o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path2o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path2o$] - 1}]}, ImageSize -> Large]], 
      "Specifications" :> {{{$CellContext`progress$$, 0.2}, 0, 1, ControlType -> 
         Slider, Appearance -> "Labeled"}, {{$CellContext`ps1$$, {
           Rational[4, 5], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(s\), \(1\)]\)"]]}, {{$CellContext`ps2$$, {
           Rational[1, 4], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(s\), \(2\)]\)"]]}, {{$CellContext`pe1$$, {
           Rational[1, 4], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(e\), \(1\)]\)"]]}, {{$CellContext`pe2$$, {
           Rational[4, 5], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(e\), \(2\)]\)"]]}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{625., {331., 336.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`achieveDesiredXspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`retVal, $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]s, $CellContext`L, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r, \
$CellContext`moves, $CellContext`poses, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startTop, $CellContext`pathTop, \
$CellContext`pathBottom, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 2] > 
           Part[$CellContext`ps2, 
             2], $CellContext`currPosTop = $CellContext`ps1; \
$CellContext`currPosBottom = $CellContext`ps2; $CellContext`endPosTop = \
$CellContext`pe1; $CellContext`endPosBottom = $CellContext`pe2; 
           Null, $CellContext`currPosTop = $CellContext`ps2; \
$CellContext`currPosBottom = $CellContext`ps1; $CellContext`endPosTop = \
$CellContext`pe2; $CellContext`endPosBottom = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startTop = $CellContext`currPosTop; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosTop, 1] - 
           Part[$CellContext`endPosBottom, 1]; $CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathTop = {$CellContext`currPosTop}; \
$CellContext`pathBottom = {$CellContext`currPosBottom}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]s == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = {
             Part[$CellContext`endPosTop, 1] - 
              Part[$CellContext`currPosTop, 1], 0}; 
           AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
           AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; 
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; \
$CellContext`\[CapitalDelta]r = {
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosTop, 1], 
              
              Part[$CellContext`currPosBottom, 
               1]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosTop, 1], 
                
                Part[$CellContext`currPosBottom, 
                 1]] + $CellContext`my\[Epsilon]], 
            0}; $CellContext`\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + \
{0, -Part[$CellContext`currPosBottom, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]s > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s], $CellContext`L - 
              Part[$CellContext`currPosTop, 1]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]s], 
               Part[$CellContext`currPosTop, 1]]], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {0, $CellContext`my\[Epsilon]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; \
$CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]s, \
$CellContext`retVal = \
$CellContext`achieveDesiredXspacing[$CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom]; $CellContext`currPosTop = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosBottom = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosTop = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosBottom = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathTop = 
            Join[$CellContext`pathTop, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathBottom = 
            Join[$CellContext`pathBottom, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosBottom, \
$CellContext`currPosTop, $CellContext`endPosBottom, $CellContext`endPosTop, \
$CellContext`pathBottom, $CellContext`pathTop}], 
           
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; 
         Null], $CellContext`achieveDesiredYspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]e, $CellContext`\[CapitalDelta]y, \
$CellContext`L, $CellContext`retVal, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r, $CellContext`moves, \
$CellContext`endPosRight, $CellContext`endPosLeft, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startRight, $CellContext`pathRight, \
$CellContext`pathLeft, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 1] > 
           Part[$CellContext`ps2, 
             1], $CellContext`currPosRight = $CellContext`ps1; \
$CellContext`currPosLeft = $CellContext`ps2; $CellContext`endPosRight = \
$CellContext`pe1; $CellContext`endPosLeft = $CellContext`pe2; 
           Null, $CellContext`currPosRight = $CellContext`ps2; \
$CellContext`currPosLeft = $CellContext`ps1; $CellContext`endPosRight = \
$CellContext`pe2; $CellContext`endPosLeft = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startRight = $CellContext`currPosRight; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosRight, 2] - 
           Part[$CellContext`endPosLeft, 2]; $CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathRight = {$CellContext`currPosRight}; \
$CellContext`pathLeft = {$CellContext`currPosLeft}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]y == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = $CellContext`endPosRight - \
$CellContext`currPosRight; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
           AppendTo[$CellContext`pathLeft, $CellContext`endPosLeft]; 
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]; \
$CellContext`\[CapitalDelta]r = {0, 
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosRight, 2], 
              
              Part[$CellContext`currPosLeft, 
               2]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosRight, 2], 
                
                Part[$CellContext`currPosLeft, 
                 2]] + $CellContext`my\[Epsilon]]}; $CellContext`\
\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + {-
             Part[$CellContext`currPosLeft, 1], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {0, 
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]y > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y], $CellContext`L - 
              Part[$CellContext`currPosRight, 2]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]y], 
               Part[$CellContext`currPosRight, 2]]]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {$CellContext`my\[Epsilon], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {
           Part[$CellContext`endPosRight, 1] - 
            Part[$CellContext`currPosRight, 1], 
            Part[$CellContext`endPosRight, 2] - 
            Part[$CellContext`currPosRight, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]y, \
$CellContext`retVal = \
$CellContext`achieveDesiredYspacing[$CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft]; \
$CellContext`currPosRight = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosLeft = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosRight = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosLeft = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathRight = 
            Join[$CellContext`pathRight, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathLeft = 
            Join[$CellContext`pathLeft, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosLeft, \
$CellContext`currPosRight, $CellContext`endPosLeft, $CellContext`endPosRight, \
$CellContext`pathLeft, $CellContext`pathRight}], 
           
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]], $CellContext`myCirc[
         Pattern[$CellContext`Progress, 
          Blank[]], 
         Pattern[$CellContext`MyColor, 
          Blank[]], 
         Pattern[$CellContext`MyText, 
          Blank[]]] := Graphics[{White, 
          If[
           And[$CellContext`Progress < 0.95, $CellContext`Progress > 0.05], {
            Opacity[0.5], 
            Disk[{0, 0}, 2]}], $CellContext`MyColor, 
          Thickness[0.1], 
          Circle[{0, 0}, 2], 
          Text[$CellContext`MyText, {0, 0}, {Center, Center}]}, ImageSize -> 
         20]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6562432120991087`*^9},
 CellID->1126441799],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pe1$$ = {0.706, 
    0.8180000000000001}, $CellContext`pe2$$ = {0.483, 
    0.07100000000000001}, $CellContext`progress$$ = 
    0.268, $CellContext`ps1$$ = {0.12, 0.637}, $CellContext`ps2$$ = {0.5605, 
    0.217}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`progress$$], 0.2}, 0, 1}, {{
       Hold[$CellContext`ps1$$], {
        Rational[4, 5], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`ps2$$], {
        Rational[1, 4], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe1$$], {
        Rational[1, 4], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe2$$], {
        Rational[4, 5], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}}, Typeset`size$$ = {
    576., {285., 290.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`progress$146733$$ = 
    0, $CellContext`ps1$146734$$ = {0, 0}, $CellContext`ps2$146735$$ = {0, 
    0}, $CellContext`pe1$146736$$ = {0, 0}, $CellContext`pe2$146737$$ = {0, 
    0}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`pe1$$ = {
          Rational[1, 4], 
          Rational[3, 4]}, $CellContext`pe2$$ = {
          Rational[4, 5], 
          Rational[1, 2]}, $CellContext`progress$$ = 0.2, $CellContext`ps1$$ = {
          Rational[4, 5], 
          Rational[3, 4]}, $CellContext`ps2$$ = {
          Rational[1, 4], 
          Rational[1, 2]}}, "ControllerVariables" :> {
        Hold[$CellContext`progress$$, $CellContext`progress$146733$$, 0], 
        Hold[$CellContext`ps1$$, $CellContext`ps1$146734$$, {0, 0}], 
        Hold[$CellContext`ps2$$, $CellContext`ps2$146735$$, {0, 0}], 
        Hold[$CellContext`pe1$$, $CellContext`pe1$146736$$, {0, 0}], 
        Hold[$CellContext`pe2$$, $CellContext`pe2$146737$$, {0, 0}]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositionsX$, $CellContext`path$, \
$CellContext`movesAndPositionsY$, $CellContext`path1$, $CellContext`path2$, \
$CellContext`i$, $CellContext`path1o$, $CellContext`path2o$, \
$CellContext`frac$, $CellContext`progInd$, $CellContext`thickness$ = 
         0.005}, $CellContext`movesAndPositionsX$ = \
$CellContext`achieveDesiredXspacing[$CellContext`ps1$$, $CellContext`ps2$$, \
$CellContext`pe1$$, $CellContext`pe2$$]; $CellContext`movesAndPositionsY$ = \
$CellContext`achieveDesiredYspacing[
           Part[$CellContext`movesAndPositionsX$, 2], 
           Part[$CellContext`movesAndPositionsX$, 3], 
           Part[$CellContext`movesAndPositionsX$, 4], 
           Part[$CellContext`movesAndPositionsX$, 5]]; $CellContext`path$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 1], 
           Part[$CellContext`movesAndPositionsY$, 1]]; $CellContext`path1$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 6], 
           Part[$CellContext`movesAndPositionsY$, 6, 
            Span[2, All]]]; $CellContext`path2$ = Join[
           Part[$CellContext`movesAndPositionsX$, 7], 
           Part[$CellContext`movesAndPositionsY$, 7, 
            Span[2, All]]]; $CellContext`frac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path1$] - 
             1) + 1]; $CellContext`progInd$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path1$] - 1)] + 
          1; $CellContext`path1o$ = Part[$CellContext`path1$, 
           Span[1, $CellContext`progInd$]]; $CellContext`path2o$ = 
         Part[$CellContext`path2$, 
           Span[1, $CellContext`progInd$]]; 
        If[$CellContext`frac$ > 0, 
          AppendTo[$CellContext`path1o$, $CellContext`frac$ (
              Part[$CellContext`path1$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path1$, $CellContext`progInd$]) + 
            Part[$CellContext`path1$, $CellContext`progInd$]]; 
          AppendTo[$CellContext`path2o$, $CellContext`frac$ (
              Part[$CellContext`path2$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path2$, $CellContext`progInd$]) + 
            Part[$CellContext`path2$, $CellContext`progInd$]]; Null]; 
        Graphics[{White, 
           Rectangle[(-0.05) {1, 1}, 1.05 {1, 1}], 
           Darker[Red], 
           Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}], White, 
           Rectangle[{0, 0}, {1, 1}], 
           PointSize[0.02], Blue, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps1$$, $CellContext`pe1$$}]}, Magenta, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps2$$, $CellContext`pe2$$}]}, 
           Thickness[$CellContext`thickness$], Blue, {
            Darker[Blue], 
            Point[{
              Last[$CellContext`path1o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path1o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path1o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path1o$] - 1}], Magenta, {
            Darker[Magenta], 
            Point[{
              Last[$CellContext`path2o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path2o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path2o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path2o$] - 1}]}, ImageSize -> Large]], 
      "Specifications" :> {{{$CellContext`progress$$, 0.2}, 0, 1, ControlType -> 
         Slider, Appearance -> "Labeled"}, {{$CellContext`ps1$$, {
           Rational[4, 5], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(s\), \(1\)]\)"]]}, {{$CellContext`ps2$$, {
           Rational[1, 4], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(s\), \(2\)]\)"]]}, {{$CellContext`pe1$$, {
           Rational[1, 4], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(e\), \(1\)]\)"]]}, {{$CellContext`pe2$$, {
           Rational[4, 5], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(e\), \(2\)]\)"]]}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{625., {331., 336.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`achieveDesiredXspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`retVal, $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]s, $CellContext`L, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r, \
$CellContext`moves, $CellContext`poses, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startTop, $CellContext`pathTop, \
$CellContext`pathBottom, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 2] > 
           Part[$CellContext`ps2, 
             2], $CellContext`currPosTop = $CellContext`ps1; \
$CellContext`currPosBottom = $CellContext`ps2; $CellContext`endPosTop = \
$CellContext`pe1; $CellContext`endPosBottom = $CellContext`pe2; 
           Null, $CellContext`currPosTop = $CellContext`ps2; \
$CellContext`currPosBottom = $CellContext`ps1; $CellContext`endPosTop = \
$CellContext`pe2; $CellContext`endPosBottom = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startTop = $CellContext`currPosTop; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosTop, 1] - 
           Part[$CellContext`endPosBottom, 1]; $CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathTop = {$CellContext`currPosTop}; \
$CellContext`pathBottom = {$CellContext`currPosBottom}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]s == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = {
             Part[$CellContext`endPosTop, 1] - 
              Part[$CellContext`currPosTop, 1], 0}; 
           AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
           AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; 
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; \
$CellContext`\[CapitalDelta]r = {
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosTop, 1], 
              
              Part[$CellContext`currPosBottom, 
               1]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosTop, 1], 
                
                Part[$CellContext`currPosBottom, 
                 1]] + $CellContext`my\[Epsilon]], 
            0}; $CellContext`\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + \
{0, -Part[$CellContext`currPosBottom, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]s > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s], $CellContext`L - 
              Part[$CellContext`currPosTop, 1]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]s], 
               Part[$CellContext`currPosTop, 1]]], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {0, $CellContext`my\[Epsilon]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; \
$CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]s, \
$CellContext`retVal = \
$CellContext`achieveDesiredXspacing[$CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom]; $CellContext`currPosTop = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosBottom = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosTop = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosBottom = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathTop = 
            Join[$CellContext`pathTop, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathBottom = 
            Join[$CellContext`pathBottom, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosBottom, \
$CellContext`currPosTop, $CellContext`endPosBottom, $CellContext`endPosTop, \
$CellContext`pathBottom, $CellContext`pathTop}], 
           
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; 
         Null], $CellContext`achieveDesiredYspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]e, $CellContext`\[CapitalDelta]y, \
$CellContext`L, $CellContext`retVal, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r, $CellContext`moves, \
$CellContext`endPosRight, $CellContext`endPosLeft, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startRight, $CellContext`pathRight, \
$CellContext`pathLeft, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 1] > 
           Part[$CellContext`ps2, 
             1], $CellContext`currPosRight = $CellContext`ps1; \
$CellContext`currPosLeft = $CellContext`ps2; $CellContext`endPosRight = \
$CellContext`pe1; $CellContext`endPosLeft = $CellContext`pe2; 
           Null, $CellContext`currPosRight = $CellContext`ps2; \
$CellContext`currPosLeft = $CellContext`ps1; $CellContext`endPosRight = \
$CellContext`pe2; $CellContext`endPosLeft = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startRight = $CellContext`currPosRight; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosRight, 2] - 
           Part[$CellContext`endPosLeft, 2]; $CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathRight = {$CellContext`currPosRight}; \
$CellContext`pathLeft = {$CellContext`currPosLeft}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]y == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = $CellContext`endPosRight - \
$CellContext`currPosRight; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
           AppendTo[$CellContext`pathLeft, $CellContext`endPosLeft]; 
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]; \
$CellContext`\[CapitalDelta]r = {0, 
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosRight, 2], 
              
              Part[$CellContext`currPosLeft, 
               2]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosRight, 2], 
                
                Part[$CellContext`currPosLeft, 
                 2]] + $CellContext`my\[Epsilon]]}; $CellContext`\
\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + {-
             Part[$CellContext`currPosLeft, 1], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {0, 
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]y > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y], $CellContext`L - 
              Part[$CellContext`currPosRight, 2]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]y], 
               Part[$CellContext`currPosRight, 2]]]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {$CellContext`my\[Epsilon], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {
           Part[$CellContext`endPosRight, 1] - 
            Part[$CellContext`currPosRight, 1], 
            Part[$CellContext`endPosRight, 2] - 
            Part[$CellContext`currPosRight, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]y, \
$CellContext`retVal = \
$CellContext`achieveDesiredYspacing[$CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft]; \
$CellContext`currPosRight = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosLeft = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosRight = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosLeft = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathRight = 
            Join[$CellContext`pathRight, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathLeft = 
            Join[$CellContext`pathLeft, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosLeft, \
$CellContext`currPosRight, $CellContext`endPosLeft, $CellContext`endPosRight, \
$CellContext`pathLeft, $CellContext`pathRight}], 
           
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]], $CellContext`myCirc[
         Pattern[$CellContext`Progress, 
          Blank[]], 
         Pattern[$CellContext`MyColor, 
          Blank[]], 
         Pattern[$CellContext`MyText, 
          Blank[]]] := Graphics[{White, 
          If[
           And[$CellContext`Progress < 0.95, $CellContext`Progress > 0.05], {
            Opacity[0.5], 
            Disk[{0, 0}, 2]}], $CellContext`MyColor, 
          Thickness[0.1], 
          Circle[{0, 0}, 2], 
          Text[$CellContext`MyText, {0, 0}, {Center, Center}]}, ImageSize -> 
         20]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6562432120991087`*^9},
 CellID->2038967488],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pe1$$ = {0.706, 
    0.8180000000000001}, $CellContext`pe2$$ = {0.483, 
    0.07100000000000001}, $CellContext`progress$$ = 
    0.186, $CellContext`ps1$$ = {0.12, 0.637}, $CellContext`ps2$$ = {0.5605, 
    0.217}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`progress$$], 0.2}, 0, 1}, {{
       Hold[$CellContext`ps1$$], {
        Rational[4, 5], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`ps2$$], {
        Rational[1, 4], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe1$$], {
        Rational[1, 4], 
        Rational[3, 4]}}, {0, 0}, {1, 1}}, {{
       Hold[$CellContext`pe2$$], {
        Rational[4, 5], 
        Rational[1, 2]}}, {0, 0}, {1, 1}}}, Typeset`size$$ = {
    576., {285., 290.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`progress$146733$$ = 
    0, $CellContext`ps1$146734$$ = {0, 0}, $CellContext`ps2$146735$$ = {0, 
    0}, $CellContext`pe1$146736$$ = {0, 0}, $CellContext`pe2$146737$$ = {0, 
    0}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`pe1$$ = {
          Rational[1, 4], 
          Rational[3, 4]}, $CellContext`pe2$$ = {
          Rational[4, 5], 
          Rational[1, 2]}, $CellContext`progress$$ = 0.2, $CellContext`ps1$$ = {
          Rational[4, 5], 
          Rational[3, 4]}, $CellContext`ps2$$ = {
          Rational[1, 4], 
          Rational[1, 2]}}, "ControllerVariables" :> {
        Hold[$CellContext`progress$$, $CellContext`progress$146733$$, 0], 
        Hold[$CellContext`ps1$$, $CellContext`ps1$146734$$, {0, 0}], 
        Hold[$CellContext`ps2$$, $CellContext`ps2$146735$$, {0, 0}], 
        Hold[$CellContext`pe1$$, $CellContext`pe1$146736$$, {0, 0}], 
        Hold[$CellContext`pe2$$, $CellContext`pe2$146737$$, {0, 0}]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositionsX$, $CellContext`path$, \
$CellContext`movesAndPositionsY$, $CellContext`path1$, $CellContext`path2$, \
$CellContext`i$, $CellContext`path1o$, $CellContext`path2o$, \
$CellContext`frac$, $CellContext`progInd$, $CellContext`thickness$ = 
         0.005}, $CellContext`movesAndPositionsX$ = \
$CellContext`achieveDesiredXspacing[$CellContext`ps1$$, $CellContext`ps2$$, \
$CellContext`pe1$$, $CellContext`pe2$$]; $CellContext`movesAndPositionsY$ = \
$CellContext`achieveDesiredYspacing[
           Part[$CellContext`movesAndPositionsX$, 2], 
           Part[$CellContext`movesAndPositionsX$, 3], 
           Part[$CellContext`movesAndPositionsX$, 4], 
           Part[$CellContext`movesAndPositionsX$, 5]]; $CellContext`path$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 1], 
           Part[$CellContext`movesAndPositionsY$, 1]]; $CellContext`path1$ = 
         Join[
           Part[$CellContext`movesAndPositionsX$, 6], 
           Part[$CellContext`movesAndPositionsY$, 6, 
            Span[2, All]]]; $CellContext`path2$ = Join[
           Part[$CellContext`movesAndPositionsX$, 7], 
           Part[$CellContext`movesAndPositionsY$, 7, 
            Span[2, All]]]; $CellContext`frac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path1$] - 
             1) + 1]; $CellContext`progInd$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path1$] - 1)] + 
          1; $CellContext`path1o$ = Part[$CellContext`path1$, 
           Span[1, $CellContext`progInd$]]; $CellContext`path2o$ = 
         Part[$CellContext`path2$, 
           Span[1, $CellContext`progInd$]]; 
        If[$CellContext`frac$ > 0, 
          AppendTo[$CellContext`path1o$, $CellContext`frac$ (
              Part[$CellContext`path1$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path1$, $CellContext`progInd$]) + 
            Part[$CellContext`path1$, $CellContext`progInd$]]; 
          AppendTo[$CellContext`path2o$, $CellContext`frac$ (
              Part[$CellContext`path2$, $CellContext`progInd$ + 1] - 
              Part[$CellContext`path2$, $CellContext`progInd$]) + 
            Part[$CellContext`path2$, $CellContext`progInd$]]; Null]; 
        Graphics[{White, 
           Rectangle[(-0.05) {1, 1}, 1.05 {1, 1}], 
           Darker[Red], 
           Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}], White, 
           Rectangle[{0, 0}, {1, 1}], 
           PointSize[0.02], Blue, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps1$$, $CellContext`pe1$$}]}, Magenta, {
            Directive[
             Thickness[$CellContext`thickness$], Dashed, 
             Opacity[0.3]], 
            Arrow[{$CellContext`ps2$$, $CellContext`pe2$$}]}, 
           Thickness[$CellContext`thickness$], Blue, {
            Darker[Blue], 
            Point[{
              Last[$CellContext`path1o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path1o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path1o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path1o$] - 1}], Magenta, {
            Darker[Magenta], 
            Point[{
              Last[$CellContext`path2o$]}]}, 
           Table[
            Arrow[{
              Part[$CellContext`path2o$, $CellContext`i$, 
               Span[1, All]], 
              Part[$CellContext`path2o$, $CellContext`i$ + 1, 
               Span[1, All]]}], {$CellContext`i$, 1, 
             Length[$CellContext`path2o$] - 1}]}, ImageSize -> Large]], 
      "Specifications" :> {{{$CellContext`progress$$, 0.2}, 0, 1, ControlType -> 
         Slider, Appearance -> "Labeled"}, {{$CellContext`ps1$$, {
           Rational[4, 5], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(s\), \(1\)]\)"]]}, {{$CellContext`ps2$$, {
           Rational[1, 4], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(s\), \(2\)]\)"]]}, {{$CellContext`pe1$$, {
           Rational[1, 4], 
           Rational[3, 4]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Blue, 
            "\!\(\*SubscriptBox[\(e\), \(1\)]\)"]]}, {{$CellContext`pe2$$, {
           Rational[4, 5], 
           Rational[1, 2]}}, {0, 0}, {1, 1}, ControlType -> Locator, 
         Appearance -> Dynamic[
           $CellContext`myCirc[$CellContext`progress$$, Magenta, 
            "\!\(\*SubscriptBox[\(e\), \(2\)]\)"]]}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{625., {331., 336.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`achieveDesiredXspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`retVal, $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]s, $CellContext`L, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r, \
$CellContext`moves, $CellContext`poses, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startTop, $CellContext`pathTop, \
$CellContext`pathBottom, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 2] > 
           Part[$CellContext`ps2, 
             2], $CellContext`currPosTop = $CellContext`ps1; \
$CellContext`currPosBottom = $CellContext`ps2; $CellContext`endPosTop = \
$CellContext`pe1; $CellContext`endPosBottom = $CellContext`pe2; 
           Null, $CellContext`currPosTop = $CellContext`ps2; \
$CellContext`currPosBottom = $CellContext`ps1; $CellContext`endPosTop = \
$CellContext`pe2; $CellContext`endPosBottom = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startTop = $CellContext`currPosTop; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosTop, 1] - 
           Part[$CellContext`endPosBottom, 1]; $CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathTop = {$CellContext`currPosTop}; \
$CellContext`pathBottom = {$CellContext`currPosBottom}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]s == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = {
             Part[$CellContext`endPosTop, 1] - 
              Part[$CellContext`currPosTop, 1], 0}; 
           AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
           AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; 
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; \
$CellContext`\[CapitalDelta]r = {
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosTop, 1], 
              
              Part[$CellContext`currPosBottom, 
               1]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosTop, 1], 
                
                Part[$CellContext`currPosBottom, 
                 1]] + $CellContext`my\[Epsilon]], 
            0}; $CellContext`\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + \
{0, -Part[$CellContext`currPosBottom, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]s > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]s], $CellContext`L - 
              Part[$CellContext`currPosTop, 1]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]s], 
               Part[$CellContext`currPosTop, 1]]], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathTop, $CellContext`currPosTop]; 
         AppendTo[$CellContext`pathBottom, $CellContext`currPosBottom]; \
$CellContext`\[CapitalDelta]r = {0, $CellContext`my\[Epsilon]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosTop, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosBottom, $CellContext`\[CapitalDelta]r]; \
$CellContext`\[CapitalDelta]s = 
          Part[$CellContext`currPosTop, 1] - 
           Part[$CellContext`currPosBottom, 1]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]s, \
$CellContext`retVal = \
$CellContext`achieveDesiredXspacing[$CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom]; $CellContext`currPosTop = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosBottom = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosTop = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosBottom = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathTop = 
            Join[$CellContext`pathTop, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathBottom = 
            Join[$CellContext`pathBottom, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosBottom, \
$CellContext`currPosTop, $CellContext`endPosBottom, $CellContext`endPosTop, \
$CellContext`pathBottom, $CellContext`pathTop}], 
           
           Return[{$CellContext`moves, $CellContext`currPosTop, \
$CellContext`currPosBottom, $CellContext`endPosTop, \
$CellContext`endPosBottom, $CellContext`pathTop, $CellContext`pathBottom}]]; 
         Null], $CellContext`achieveDesiredYspacing[
         Pattern[$CellContext`ps1, 
          Blank[]], 
         Pattern[$CellContext`ps2, 
          Blank[]], 
         Pattern[$CellContext`pe1, 
          Blank[]], 
         Pattern[$CellContext`pe2, 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]e, $CellContext`\[CapitalDelta]y, \
$CellContext`L, $CellContext`retVal, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r, $CellContext`moves, \
$CellContext`endPosRight, $CellContext`endPosLeft, $CellContext`my\[Epsilon] = 
          1/100, $CellContext`startRight, $CellContext`pathRight, \
$CellContext`pathLeft, $CellContext`flip = False}, 
         If[Part[$CellContext`ps1, 1] > 
           Part[$CellContext`ps2, 
             1], $CellContext`currPosRight = $CellContext`ps1; \
$CellContext`currPosLeft = $CellContext`ps2; $CellContext`endPosRight = \
$CellContext`pe1; $CellContext`endPosLeft = $CellContext`pe2; 
           Null, $CellContext`currPosRight = $CellContext`ps2; \
$CellContext`currPosLeft = $CellContext`ps1; $CellContext`endPosRight = \
$CellContext`pe2; $CellContext`endPosLeft = $CellContext`pe1; \
$CellContext`flip = True; 
           Null]; $CellContext`startRight = $CellContext`currPosRight; \
$CellContext`\[CapitalDelta]e = 
          Part[$CellContext`endPosRight, 2] - 
           Part[$CellContext`endPosLeft, 2]; $CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; $CellContext`moves = {{0, 
           0}}; $CellContext`pathRight = {$CellContext`currPosRight}; \
$CellContext`pathLeft = {$CellContext`currPosLeft}; $CellContext`L = 1; 
         If[$CellContext`\[CapitalDelta]y == $CellContext`\[CapitalDelta]e, \
$CellContext`\[CapitalDelta]r = $CellContext`endPosRight - \
$CellContext`currPosRight; 
           AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
           AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
           AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
           AppendTo[$CellContext`pathLeft, $CellContext`endPosLeft]; 
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]; \
$CellContext`\[CapitalDelta]r = {0, 
            If[$CellContext`\[CapitalDelta]e < 0, $CellContext`L - Max[
              Part[$CellContext`currPosRight, 2], 
              
              Part[$CellContext`currPosLeft, 
               2]] - $CellContext`my\[Epsilon], -Min[
                Part[$CellContext`currPosRight, 2], 
                
                Part[$CellContext`currPosLeft, 
                 2]] + $CellContext`my\[Epsilon]]}; $CellContext`\
\[CapitalDelta]r = $CellContext`\[CapitalDelta]r + {-
             Part[$CellContext`currPosLeft, 1], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {0, 
            
            If[$CellContext`\[CapitalDelta]e - $CellContext`\[CapitalDelta]y > 
             0, 
             Min[
              
              Abs[$CellContext`\[CapitalDelta]e - \
$CellContext`\[CapitalDelta]y], $CellContext`L - 
              Part[$CellContext`currPosRight, 2]], -Min[
               
               Abs[$CellContext`\[CapitalDelta]e - $CellContext`\
\[CapitalDelta]y], 
               Part[$CellContext`currPosRight, 2]]]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {$CellContext`my\[Epsilon], 0}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]r = {
           Part[$CellContext`endPosRight, 1] - 
            Part[$CellContext`currPosRight, 1], 
            Part[$CellContext`endPosRight, 2] - 
            Part[$CellContext`currPosRight, 2]}; 
         AppendTo[$CellContext`moves, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosRight, $CellContext`\[CapitalDelta]r]; 
         AddTo[$CellContext`currPosLeft, $CellContext`\[CapitalDelta]r]; 
         AppendTo[$CellContext`pathRight, $CellContext`currPosRight]; 
         AppendTo[$CellContext`pathLeft, $CellContext`currPosLeft]; \
$CellContext`\[CapitalDelta]y = 
          Part[$CellContext`currPosRight, 2] - 
           Part[$CellContext`currPosLeft, 2]; 
         If[$CellContext`\[CapitalDelta]e != $CellContext`\[CapitalDelta]y, \
$CellContext`retVal = \
$CellContext`achieveDesiredYspacing[$CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft]; \
$CellContext`currPosRight = 
            Part[$CellContext`retVal, 2]; $CellContext`currPosLeft = 
            Part[$CellContext`retVal, 3]; $CellContext`endPosRight = 
            Part[$CellContext`retVal, 4]; $CellContext`endPosLeft = 
            Part[$CellContext`retVal, 5]; $CellContext`moves = 
            Join[$CellContext`moves, 
              Part[$CellContext`retVal, 1, 
               Span[2, All]]]; $CellContext`pathRight = 
            Join[$CellContext`pathRight, 
              Part[$CellContext`retVal, 6, 
               Span[2, All]]]; $CellContext`pathLeft = 
            Join[$CellContext`pathLeft, 
              Part[$CellContext`retVal, 7, 
               Span[2, All]]]; Null]; If[$CellContext`flip, 
           
           Return[{$CellContext`moves, $CellContext`currPosLeft, \
$CellContext`currPosRight, $CellContext`endPosLeft, $CellContext`endPosRight, \
$CellContext`pathLeft, $CellContext`pathRight}], 
           
           Return[{$CellContext`moves, $CellContext`currPosRight, \
$CellContext`currPosLeft, $CellContext`endPosRight, $CellContext`endPosLeft, \
$CellContext`pathRight, $CellContext`pathLeft}]]], $CellContext`myCirc[
         Pattern[$CellContext`Progress, 
          Blank[]], 
         Pattern[$CellContext`MyColor, 
          Blank[]], 
         Pattern[$CellContext`MyText, 
          Blank[]]] := Graphics[{White, 
          If[
           And[$CellContext`Progress < 0.95, $CellContext`Progress > 0.05], {
            Opacity[0.5], 
            Disk[{0, 0}, 2]}], $CellContext`MyColor, 
          Thickness[0.1], 
          Circle[{0, 0}, 2], 
          Text[$CellContext`MyText, {0, 0}, {Center, Center}]}, ImageSize -> 
         20]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6562432120991087`*^9},
 CellID->1530015637]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
Micro- and nano-robots hold promise for targeted drug delivery and \
micro-scale manufacturing. Due to their small size, large numbers of \
micro-robots are required to deliver sufficient payloads, but their small \
size makes it difficult to perform onboard computation or contain a power and \
propulsion source. For this reason these robots are usually powered and \
controlled by global inputs, such as a uniform external electric or magnetic \
field. Nevertheless, these applications require precision control of the \
shape and position of the robot swarm. This demonstration uses friction with \
boundary walls to break the symmetry caused by the global input. Wall \
friction is used to steer two robots to arbitrary positions. We assume the \
walls have infinite friction that oppose any shear forces, so a particle in \
contact with the wall will not move unless the global input is directed away \
from the wall.\
\>", "DetailNotes",
 CellChangeTimes->{{3.6562436889702787`*^9, 3.656243774394072*^9}, {
   3.656243805609994*^9, 3.65624388963586*^9}, 3.6562444650748053`*^9},
 CellID->1321704648]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.656243373781057*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["micro robot", "SearchTerms",
 CellChangeTimes->{{3.656243329838565*^9, 3.656243333366346*^9}},
 CellID->1526825818],

Cell["nano robot", "SearchTerms",
 CellChangeTimes->{{3.656243329838565*^9, 3.6562433366567*^9}},
 CellID->2103676052],

Cell["global input", "SearchTerms",
 CellChangeTimes->{{3.656243329838565*^9, 3.65624334028122*^9}},
 CellID->1824992530],

Cell["shared control", "SearchTerms",
 CellChangeTimes->{{3.656243329838565*^9, 3.6562433535617647`*^9}},
 CellID->1086509384],

Cell["under actuated", "SearchTerms",
 CellChangeTimes->{{3.65624335549229*^9, 3.6562433646866693`*^9}, 
   3.656244473937188*^9},
 CellID->2010211626],

Cell["swarm", "SearchTerms",
 CellChangeTimes->{{3.65624335549229*^9, 3.656243367207562*^9}},
 CellID->2112517744],

Cell["robot swarm", "SearchTerms",
 CellChangeTimes->{{3.65624335549229*^9, 3.6562433704793663`*^9}},
 CellID->985590839]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Ensemble Control of Robots with Unicycle Kinematics",
 
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
EnsembleControlOfRobotsWithUnicycleKinematics/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
EnsembleControlOfRobotsWithUnicycleKinematics/"]], "RelatedLinks",
 CellChangeTimes->{{3.656244021724565*^9, 3.656244021726632*^9}},
 CellID->1781125872],

Cell[TextData[ButtonBox["Friction",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://scienceworld.wolfram.com/physics/Friction.html"], None},
 ButtonNote->
  "http://scienceworld.wolfram.com/physics/Friction.html"]], "RelatedLinks",
 CellChangeTimes->{{3.656244183140074*^9, 3.656244190055181*^9}},
 CellID->1607975171],

Cell[TextData[ButtonBox["Static Friction",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://scienceworld.wolfram.com/physics/StaticFriction.html"], None},
 ButtonNote->
  "http://scienceworld.wolfram.com/physics/StaticFriction.html"]], \
"RelatedLinks",
 CellChangeTimes->{{3.656244198035781*^9, 3.656244216624057*^9}},
 CellID->1304485149],

Cell[TextData[Cell[BoxData[
 FormBox[
  ButtonBox[
   RowBox[{"Static", " ", "Friction"}],
   BaseStyle->"Hyperlink",
   ButtonData->{
     URL["http://demonstrations.wolfram.com/StaticFriction/"], None},
   ButtonNote->"http://demonstrations.wolfram.com/StaticFriction/"], 
  TraditionalForm]], "InlineMath",
 FormatType->"TraditionalForm"]], "RelatedLinks",
 CellChangeTimes->{{3.656244286965909*^9, 3.656244301801321*^9}, {
  3.656244358911045*^9, 3.65624437740208*^9}},
 CellID->354482224],

Cell[TextData[ButtonBox["Effect of Friction on Ball Rolling Down a Ramp",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
EffectOfFrictionOnBallRollingDownARamp/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/EffectOfFrictionOnBallRollingDownARamp/"]\
], "RelatedLinks",
 CellChangeTimes->{{3.656244405842351*^9, 3.65624440584439*^9}},
 CellID->1354228994]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell["Contributed by: Shiva Shahrokhi and Aaron T. Becker", "Author",
 CellChangeTimes->{3.6562433172526484`*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{700, 619},
WindowMargins->{{10, Automatic}, {Automatic, 24}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September 9, \
2014)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[175009, 3592, 1464, 31, 29, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[176476, 3625, 908, 21, 29, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[173150, 3541, 637, 15, 29, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[172766, 3527, 381, 12, 29, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[174637, 3581, 369, 9, 29, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[171770, 3499, 312, 8, 29, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[172085, 3509, 678, 16, 29, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[173790, 3558, 844, 21, 29, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 181020, 3765},
 {"BookmarkAnimation", 181138, 3768},
 {"CreateAndDeleteLocators", 181260, 3771},
 {"DragLocators", 181377, 3774},
 {"GamepadControls", 181486, 3777},
 {"ResizeImages", 181594, 3780},
 {"RotateAndZoomIn3D", 181704, 3783},
 {"SliderZoom", 181813, 3786}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 170, 3, 108, "DemoTitle"],
Cell[CellGroupData[{
Cell[775, 29, 33, 0, 275, "InitializationSection"],
Cell[811, 31, 36173, 785, 2487, "Input",
 InitializationCell->True,
 CellID->193214940]
}, Open  ]],
Cell[CellGroupData[{
Cell[37021, 821, 29, 0, 243, "ManipulateSection"],
Cell[CellGroupData[{
Cell[37075, 825, 13276, 330, 760, "Input"],
Cell[50354, 1157, 34835, 659, 713, "Output",
 CellID->2058388153]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[85238, 1822, 36, 0, 181, "ManipulateCaptionSection"],
Cell[85277, 1824, 533, 12, 71, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85847, 1841, 28, 0, 179, "ThumbnailSection"],
Cell[85878, 1843, 21098, 402, 679, "Output",
 CellID->2146656257]
}, Open  ]],
Cell[CellGroupData[{
Cell[107013, 2250, 28, 0, 149, "SnapshotsSection"],
Cell[107044, 2252, 21153, 404, 679, "Output",
 CellID->1126441799],
Cell[128200, 2658, 21154, 404, 679, "Output",
 CellID->2038967488],
Cell[149357, 3064, 21154, 404, 679, "Output",
 CellID->1530015637]
}, Open  ]],
Cell[CellGroupData[{
Cell[170548, 3473, 26, 0, 357, "DetailsSection"],
Cell[170577, 3475, 1116, 17, 167, "DetailNotes",
 CellID->1321704648]
}, Open  ]],
Cell[CellGroupData[{
Cell[171730, 3497, 37, 0, 131, "ControlSuggestionsSection"],
Cell[171770, 3499, 312, 8, 29, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[172085, 3509, 678, 16, 29, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[172766, 3527, 381, 12, 29, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[173150, 3541, 637, 15, 29, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[173790, 3558, 844, 21, 29, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[174637, 3581, 369, 9, 29, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[175009, 3592, 1464, 31, 29, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[176476, 3625, 908, 21, 29, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177421, 3651, 30, 0, 165, "SearchTermsSection"],
Cell[177454, 3653, 121, 2, 23, "SearchTerms",
 CellID->1526825818],
Cell[177578, 3657, 118, 2, 23, "SearchTerms",
 CellID->2103676052],
Cell[177699, 3661, 121, 2, 23, "SearchTerms",
 CellID->1824992530],
Cell[177823, 3665, 126, 2, 23, "SearchTerms",
 CellID->1086509384],
Cell[177952, 3669, 151, 3, 23, "SearchTerms",
 CellID->2010211626],
Cell[178106, 3674, 114, 2, 23, "SearchTerms",
 CellID->2112517744],
Cell[178223, 3678, 121, 2, 23, "SearchTerms",
 CellID->985590839]
}, Open  ]],
Cell[CellGroupData[{
Cell[178381, 3685, 31, 0, 149, "RelatedLinksSection"],
Cell[178415, 3687, 428, 10, 23, "RelatedLinks",
 CellID->1781125872],
Cell[178846, 3699, 325, 7, 23, "RelatedLinks",
 CellID->1607975171],
Cell[179174, 3708, 346, 8, 23, "RelatedLinks",
 CellID->1304485149],
Cell[179523, 3718, 493, 12, 24, "RelatedLinks",
 CellID->354482224],
Cell[180019, 3732, 406, 9, 23, "RelatedLinks",
 CellID->1354228994]
}, Open  ]],
Cell[CellGroupData[{
Cell[180462, 3746, 25, 0, 149, "AuthorSection"],
Cell[180490, 3748, 113, 1, 23, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
